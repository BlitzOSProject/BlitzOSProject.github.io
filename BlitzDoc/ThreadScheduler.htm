<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name=Title content="Thread Scheduler">
<meta name=Keywords content="">
<meta http-equiv=Content-Type content="text/html; charset=macintosh">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 2008">
<meta name=Originator content="Microsoft Word 2008">
<link rel=File-List href="ThreadScheduler_files/filelist.xml">
<title>Thread Scheduler</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Harry Porter</o:Author>
  <o:Template>Normal.dotm</o:Template>
  <o:LastAuthor>Harry</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>6892</o:TotalTime>
  <o:LastPrinted>2009-03-26T01:12:00Z</o:LastPrinted>
  <o:Created>2009-03-26T01:13:00Z</o:Created>
  <o:LastSaved>2009-03-26T01:13:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>14937</o:Words>
  <o:Characters>76180</o:Characters>
  <o:Lines>2930</o:Lines>
  <o:Paragraphs>1437</o:Paragraphs>
  <o:CharactersWithSpaces>104560</o:CharactersWithSpaces>
  <o:Version>12.0</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:ActiveWritingStyle Lang="EN-US" VendorID="6" DLLVersion="2" NLCheck="0">1</w:ActiveWritingStyle>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas>false</w:ValidateAgainstSchemas>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotUnderlineInvalidXML/>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:UseNormalStyleForList/>
   <w:DontUseIndentAsNumberingTabStop/>
   <w:DontGrowAutofit/>
   <w:FELineBreak11/>
   <w:WW11IndentRules/>
   <w:DontAutofitConstrainedTables/>
   <w:AutofitLikeWW11/>
   <w:HangulWidthLikeWW11/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="276">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:2 0 5 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ascii-font-family:Times;
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:Times;
	mso-bidi-font-family:"Times New Roman";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ascii-font-family:Times;
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:Times;
	mso-bidi-font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-noshow:yes;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ascii-font-family:Times;
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:Times;
	mso-bidi-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in .75in 1.0in .75in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-title-page:yes;
	mso-header:url(":ThreadScheduler_files:header.htm") h1;
	mso-footer:url(":ThreadScheduler_files:header.htm") f1;
	mso-first-footer:url(":ThreadScheduler_files:header.htm") ff1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:28.0pt;mso-bidi-font-size:10.0pt'>The Thread
Scheduler<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:28.0pt;mso-bidi-font-size:10.0pt'>and<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:28.0pt;mso-bidi-font-size:10.0pt'>Concurrency
Control Primitives<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><o:p>&nbsp;</o:p></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><o:p>&nbsp;</o:p></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><o:p>&nbsp;</o:p></b></p>

<p class=MsoNormal align=center style='text-align:center'><i style='mso-bidi-font-style:
normal'><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>Harry H.
Porter III, Ph. D.<o:p></o:p></span></i></p>

<p class=MsoNormal align=center style='text-align:center'><i style='mso-bidi-font-style:
normal'><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>Department of
Computer Science<o:p></o:p></span></i></p>

<p class=MsoNormal align=center style='text-align:center'><i style='mso-bidi-font-style:
normal'><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>Portland State
University<o:p></o:p></span></i></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>September 26, 2007<o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>Revised: August 19, 2008<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><br style='mso-special-character:
line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The BLITZ
Thread Scheduler<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This document examines the design
of a specific kernel scheduler, the <i style='mso-bidi-font-style:normal'>BLITZ
Thread Scheduler</i>.<span style="mso-spacerun: yes">&nbsp; </span>We’ll look
at data structures, at algorithms, and even at code fragments in an attempt to
explain exactly how a real thread scheduler works.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ thread scheduler is
part of the <i style='mso-bidi-font-style:normal'>BLITZ System</i>, which is a
collection of software designed to support a university-level course on
Operating Systems.<span style="mso-spacerun: yes">&nbsp; </span>Over the course
of one or two terms, students will implement a small, but complete, operating
system kernel.<span style="mso-spacerun: yes">&nbsp; </span>The BLITZ software
provides the framework for these student projects.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Who this
Document is Written For<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This document is written
primarily for students using the BLITZ system in an Operating Systems course,
but familiarity with the BLITZ system is not assumed.<span style="mso-spacerun:
yes">&nbsp; </span>Although this document is basically a <i style='mso-bidi-font-style:
normal'>code walk-through</i> of the BLITZ thread scheduler code, it can be
read by anyone interested in thread schedulers.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Familiarity with the BLITZ system
is not assumed and is not needed in order to read this.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This document will be of greatest
help to students working on “project 2” in the BLITZ build-your-own-kernel
project.<span style="mso-spacerun: yes">&nbsp; </span>Students do not need to
read this document in order to do project 2.<span style="mso-spacerun:
yes">&nbsp; </span>Nevertheless, this document goes into much greater depth and
will provide deeper insights into the concepts of thread scheduling in general
and the BLITZ scheduler in particular.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This document may also be of
interest to instructors who are using the BLITZ system in their courses.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>A Quick
Introduction to Multithreading Concepts<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At the core of an operating
system kernel lies the <i style='mso-bidi-font-style:normal'>thread scheduler</i>.<span
style="mso-spacerun: yes">&nbsp; </span>The scheduler provides the illusion
that many CPUs are available, operating in parallel, when only one CPU
exists.<span style="mso-spacerun: yes">&nbsp; </span>The scheduler implements <i
style='mso-bidi-font-style:normal'>multithreading</i> by rapidly switching the
CPU from one program to the next, so that each program can make progress over
time.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In other words, the CPU executes
one program for a short time, then switches to another program and executes it
for a while.<span style="mso-spacerun: yes">&nbsp; </span>Each individual
program is executed for a while and then suspended while other programs are
executed.<span style="mso-spacerun: yes">&nbsp; </span>After each program has
been given a turn, the process is repeated.<span style="mso-spacerun:
yes">&nbsp; </span>And each program is given another turn to execute.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The term multithreading should be
contrasted with <i style='mso-bidi-font-style:normal'>multiprocessing</i>, which
refers to a computer system composed of more than one CPU.<span
style="mso-spacerun: yes">&nbsp; </span>In a multiprocessing system, two or
more programs can truly execute in parallel, since each program can be
executing on a different CPU at the same moment.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>With multithreading, the
switching between one program and the next is done by the scheduler and is done
in such a way that each individual program is unaware that the switching is
being done.<span style="mso-spacerun: yes">&nbsp; </span>From the perspective
of an individual program, it appears that a single CPU is dedicated to its execution.<span
style="mso-spacerun: yes">&nbsp; </span>From the program’s point of view, it is
impossible to determine or distinguish whether every program is executing on
its own private CPU or whether a single CPU is being shared by all programs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When the programmer writes code
to be executed in a multithreaded environment, he or she doesn’t do anything
special.<span style="mso-spacerun: yes">&nbsp; </span>In particular, the
programmer doesn’t need to think about when the switching will occur or whether
the program will be executed in a multithreaded environment or in a
multiprocessing environment.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Multithreading is sometimes
called <i style='mso-bidi-font-style:normal'>multitasking</i> or <i
style='mso-bidi-font-style:normal'>multiprogramming</i>; for our purposes,
these terms all mean the same thing and we will avoid them in this
document.<span style="mso-spacerun: yes">&nbsp; </span>Another term for
multithreading is <i style='mso-bidi-font-style:normal'>time-slicing</i>, which
refers to the idea that time is broken into many sequential intervals.<span
style="mso-spacerun: yes">&nbsp; </span>Each program is allowed to use the CPU
for one of “slice of time” before the program is suspended and the CPU is put
to work on another program.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Multithreading and
multiprocessing are often combined.<span style="mso-spacerun: yes">&nbsp;
</span>It may be the case that the computer is a multiprocessor system which
has, say, 10 CPUs.<span style="mso-spacerun: yes">&nbsp; </span>A thread
scheduler designed for a multiprocessor system could utilize these 10 real CPUs
to execute, say, 50 programs at once.<span style="mso-spacerun: yes">&nbsp;
</span>Each of the programs would be suspended for part of the time and each
CPU would be time-sliced to execute, on average, 5 programs.<span
style="mso-spacerun: yes">&nbsp; </span>In such a scheduler, many complexities
must be addressed, such as whether each program will always be executed on the
same CPU or whether its time-slices of execution may occur on different CPUs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The BLITZ
Hardware<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The scheduler described here runs
on the BLITZ computer, which has a single CPU.<span style="mso-spacerun:
yes">&nbsp; </span>The architecture of the BLITZ machine is similar to modern
architectures, such as the SPARC, but is somewhat simplified.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At all times, the BLITZ CPU is
either running in <i style='mso-bidi-font-style:normal'>System Mode</i> or in <i
style='mso-bidi-font-style:normal'>User Mode</i>.<span style="mso-spacerun:
yes">&nbsp; </span>Certain instructions, called <i style='mso-bidi-font-style:
normal'>privileged instructions</i>, can only be executed when the CPU is in
System Mode.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The CPU has 16 general purpose<i
style='mso-bidi-font-style:normal'> integer registers</i> (called <b
style='mso-bidi-font-weight:normal'>r0</b> through <b style='mso-bidi-font-weight:
normal'>r15</b>) with 32 bits each.&nbsp; In addition, there are 16 floating
point registers (called <b style='mso-bidi-font-weight:normal'>f0</b> through <b
style='mso-bidi-font-weight:normal'>f15</b>) which can each hold a double
precision floating point value.</p>

<p class=MsoNormal style='text-align:justify'>&nbsp;</p>

<p class=MsoNormal style='text-align:justify'>There are 2 sets of the general
purpose integer registers, one for System Mode and one for User Mode.<span
style="mso-spacerun: yes">&nbsp; </span>There is only one set of the floating
point registers.</p>

<p class=MsoNormal style='text-align:justify'>&nbsp;</p>

<p class=MsoNormal style='text-align:justify'>Additional registers include a
program counter (<b style='mso-bidi-font-weight:normal'>PC</b>); a status
registers (<b style='mso-bidi-font-weight:normal'>SR</b>), and two registers
related to the page table.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ machine has an
interrupt mechanism.<span style="mso-spacerun: yes">&nbsp; </span>Interrupts
can be signaled from the following hardware and external sources:</p>

<p class=MsoNormal style='text-align:justify'><span style="mso-spacerun:
yes">&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Timer<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Disk<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Serial
Terminal<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Power-on
Reset<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Hardware
Fault<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><span style="mso-spacerun:
yes">&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'>The interrupt mechanism also
processes program exceptions arising from the following causes:</p>

<p class=MsoNormal style='text-align:justify'><span style="mso-spacerun:
yes">&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Address
Exception<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Alignment
Exception<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Arithmetic
Exception<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp; </span><span
style="mso-spacerun: yes">&nbsp;&nbsp;</span>Privileged Instruction<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Illegal
Instruction<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Fault
(invalid page)<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Fault
(update to read-only page)<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Syscall Trap
Instruction<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <i style='mso-bidi-font-style:
normal'>timer interrupt</i> is generated by the hardware regularly at a fixed
periodic rate, providing the necessary “clock tick” needed for a time-slicing
scheduler.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The CPU includes a <i
style='mso-bidi-font-style:normal'>MMU</i> (<i style='mso-bidi-font-style:normal'>Memory
Management Unit</i>) to support paging and virtual memory.<span
style="mso-spacerun: yes">&nbsp; </span>The I/O devices include a disk for
storing files and a terminal for communication with the user.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The scheduler is programmed
mostly in a high level language called <i style='mso-bidi-font-style:normal'>KPL
(Kernel Programming Language)</i>, but some critical routines are coded in
assembly code.<span style="mso-spacerun: yes">&nbsp; </span>[By the way, KPL
should not be confused with something called <i style='mso-bidi-font-style:
normal'>Kid’s Programming Language</i>.<span style="mso-spacerun: yes">&nbsp;
</span>This KPL is definitely <u>not</u> for kids!]</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ computer is emulated
using a virtual machine.<span style="mso-spacerun: yes">&nbsp; </span>The BLITZ
architecture was carefully designed to be realistic and complete enough to
execute an operating system kernel.<span style="mso-spacerun: yes">&nbsp;
</span>The thread scheduler discussed in this document forms the core of a
functional Unix-like kernel, which is elaborate enough to execute a simple
shell program.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ architecture was
designed with this single goal in mind: to facilitate the teaching of operating
systems.<span style="mso-spacerun: yes">&nbsp; </span>Consequently, much of the
complexity of modern CPU cores was avoided.<span style="mso-spacerun:
yes">&nbsp; </span>For example, the BLITZ CPU was designed with the expectation
that it would be emulated.<span style="mso-spacerun: yes">&nbsp; </span>Several
hardware optimizations&#8212;such as pipelined execution, out-of-order
execution and instruction/data caching&#8212;were not included, since these
have little relevance to this goal.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The following documents contain
more information about the BLITZ system:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><u>An
Overview of the BLITZ System</u></i></b> (7 pages)</p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><i
style='mso-bidi-font-style:normal'><u><o:p><span style='text-decoration:none'>&nbsp;</span></o:p></u></i></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><u>An
Overview of the BLITZ Computer Hardware</u></i></b> (8 pages)</p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><u>The
BLITZ Architecture</u></i></b> (71 pages)</p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify;tab-stops:.5in'><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><u>An
Overview of KPL, A Kernel Programming Language</u></i></b> (66 pages)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><span style="mso-spacerun:
yes">&nbsp;</span>All of these documents and many more may be accessed through
the BLITZ webpage:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><a
href="http://web.cecs.pdx.edu/~harry/Blitz"><span style='font-family:Courier'>http://web.cecs.pdx.edu/~harry/Blitz</span></a><span
style='font-family:Courier'><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The Thread
Concept<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Previously, we used the term
“program” loosely in the discussion of multithreading, but technically a
program is a static thing, a bunch of code.<span style="mso-spacerun:
yes">&nbsp; </span>At a given moment in time, it might not even be loaded into
a computer.<span style="mso-spacerun: yes">&nbsp; </span>But once the program
is loaded into the computer’s memory and execution begins, it becomes a <i
style='mso-bidi-font-style:normal'>process</i>.<span style="mso-spacerun:
yes">&nbsp; </span>In other words, a process is a program in execution.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A process is sometimes called a <i
style='mso-bidi-font-style:normal'>task</i>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A process consists of two things:
a memory region containing the code and a <i style='mso-bidi-font-style:normal'>thread</i>
of execution.<span style="mso-spacerun: yes">&nbsp; </span>In the simplest
scenario, with no operating system, the program would be loaded into the
computer’s memory directly and the CPU would execute the instructions of the
program, one after the other.<span style="mso-spacerun: yes">&nbsp; </span>In
this simple scenario, the CPU itself provides the thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The thread breathes life into a
program as it executes instructions; without a thread, a program is nothing
more than a bunch of bytes stored in memory.<span style="mso-spacerun:
yes">&nbsp; </span>Without instruction execution, the code will never be executed,
memory will never change, and nothing will ever happen.<span
style="mso-spacerun: yes">&nbsp; </span>The thread brings activity to the
instructions stored in the bytes of memory.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, imagine a computer with
several CPUs, all sharing the same memory.<span style="mso-spacerun:
yes">&nbsp; </span>Assume we got a <i style='mso-bidi-font-style:normal'>symmetrical</i>
system.<span style="mso-spacerun: yes">&nbsp; </span>There is only one block of
memory and each CPU can freely access all of this memory.<span
style="mso-spacerun: yes">&nbsp; </span>Each CPU is identical and any CPU can
read or update any byte.<span style="mso-spacerun: yes">&nbsp; </span>Any
update will be visible to every other CPU.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>If some program has been designed
to be executed on such a system with multiple CPUs, it is said to be a <i
style='mso-bidi-font-style:normal'>multithreaded program</i>.<span
style="mso-spacerun: yes">&nbsp; </span>Each CPU will implement a single
thread; with 10 CPUs we’ll have 10 threads.<span style="mso-spacerun:
yes">&nbsp; </span>(We’re still assuming there is no operating system yet.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In general, each CPU will be
executing at different places in the program, although it is certainly possible
that each of the CPUs is executing the same instruction at the same
moment.<span style="mso-spacerun: yes">&nbsp; </span>It is even possible that
all CPUs are marching in lockstep, doing exactly the same thing.<span
style="mso-spacerun: yes">&nbsp; </span>This synchrony of CPUs is possible but
would be unusual and occur mostly in fault-tolerant systems with “hot” backup
CPUs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In a more common scenario, each
CPU is doing something different.<span style="mso-spacerun: yes">&nbsp;
</span>All CPUs are executing instructions from the same program, but each CPU
is at a different point in that program.<span style="mso-spacerun: yes">&nbsp;
</span>In a typical multithreaded program, the CPUs are all working on some
coordinated, shared task, but each is doing something different to contribute
to the common goal.<span style="mso-spacerun: yes">&nbsp; </span>There is one
program&#8212;one set of instructions and one set of shared, global variables stored
in the shared memory&#8212;and these are shared by all CPUs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Of course, in order to complete
the task correctly, each of the CPUs will need to communicate and coordinate
with the others.<span style="mso-spacerun: yes">&nbsp; </span>This is the
problem of <i style='mso-bidi-font-style:normal'>concurrency control</i>.<span
style="mso-spacerun: yes">&nbsp; </span>There must be mechanisms whereby each
CPU can interact with the others.<span style="mso-spacerun: yes">&nbsp;
</span>For example, one CPU may provide some piece of data that another CPU
will need.<span style="mso-spacerun: yes">&nbsp; </span>If the second CPU
becomes ready for the data before the first CPU has produced it, the CPU will
have to wait.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We will discuss concurrency
control mechanisms in depth later in this paper.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Now let us return to a single CPU
system.<span style="mso-spacerun: yes">&nbsp; </span>In order to execute a
multithreaded program with only a single CPU, we need a scheduler.<span
style="mso-spacerun: yes">&nbsp; </span>The scheduler implements threads.<span
style="mso-spacerun: yes">&nbsp; </span>The scheduler provides the illusion
that there are many CPUs available.<span style="mso-spacerun: yes">&nbsp;
</span>In particular, the scheduler creates a new thread whenever the process
asks for one, providing the illusion that the computer has as many CPUs as the
process needs.<span style="mso-spacerun: yes">&nbsp; </span>It is as if there
are an infinite number of idle CPUs standing by, available to be called into
action whenever the process wants a new thread.<span style="mso-spacerun:
yes">&nbsp; </span>Each CPU will have access to the same memory, so each CPU
can access the variables and the instructions stored in memory.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In a sense, a thread is nothing
more than a <i style='mso-bidi-font-style:normal'>virtual CPU</i>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>As a starting example, let’s look
at the small code fragment shown next.<span style="mso-spacerun: yes">&nbsp;
</span>This code is written in the BLITZ assembly language:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>300,r1<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>MyLabel<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mul<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r1,500,r3<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>MyLabel:<span style="mso-spacerun: yes">&nbsp;
</span>add<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;
</span>r1,200,r3<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The code first moves the number
300 into register <b style='mso-bidi-font-weight:normal'><span
style='font-family:Courier'>r1</span></b> and then jumps to the instruction
labeled <span style='font-family:Courier'>MyLabel</span>.<span
style="mso-spacerun: yes">&nbsp; </span>Then the <span style='font-family:Courier'>add</span>
instruction will add 200 to the value in <b style='mso-bidi-font-weight:normal'><span
style='font-family:Courier'>r1</span></b> and store the result (i.e., 500) into
register <b style='mso-bidi-font-weight:normal'><span style='font-family:Courier'>r3</span></b>.<span
style="mso-spacerun: yes">&nbsp; </span>The instruction following the jump is <span
style='font-family:Courier'>mul</span> (multiply); apparently it will never be
executed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, imagine that our computer
also has a “fork” machine instruction to implement multithreading on a machine
with multiple CPUs.<span style="mso-spacerun: yes">&nbsp; </span>(In reality,
the BLITZ computer has only one CPU and does not have any such “fork”
instruction.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Now let’s change the <span
style='font-family:Courier'>jmp</span> instruction to this hypothetical <span
style='font-family:Courier'>fork</span> instruction:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>300,r1<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fork<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyLabel<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mul<span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r1,500,r3<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>MyLabel:<span style="mso-spacerun: yes">&nbsp;
</span>add<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;
</span>r1,200,r3<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This hypothetical <span
style='font-family:Courier'>fork</span> instruction is a little like a <span
style='font-family:Courier'>jmp</span> (or branch or goto) instruction, but
with an important difference: a new thread will be created each time the <span
style='font-family:Courier'>fork</span> instruction is executed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When the <span style='font-family:
Courier'>fork</span> instruction is executed, it will call into service a
second CPU, which we can assume was standing idle waiting to be needed.<span
style="mso-spacerun: yes">&nbsp; </span>The original CPU will continue
instruction execution just after the <span style='font-family:Courier'>fork</span>,
and the multiply instruction will in fact be executed next by that CPU.<span
style="mso-spacerun: yes">&nbsp; </span>However, the second CPU will begin executing
instructions, starting at <span style='font-family:Courier'>MyLabel</span>,
with the <span style='font-family:Courier'>add</span> instruction.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>So the <span style='font-family:
Courier'>mul</span> and the <span style='font-family:Courier'>add</span>
instructions will both be executed, but on different CPUs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Notice that the newly activated
CPU, when it executes the <span style='font-family:Courier'>add</span>
instruction will be starting in the middle of a program.<span
style="mso-spacerun: yes">&nbsp; </span>Its very first instruction will be the <span
style='font-family:Courier'>add</span> instruction, which makes use of the
value previously stored in register <b style='mso-bidi-font-weight:normal'><span
style='font-family:Courier'>r1</span></b>.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>In order for the newly activated CPU to begin
executing in the middle of this program, we must assume that its registers are
preloaded with exactly the values the registers had at the moment of the <span
style='font-family:Courier'>fork</span> instruction.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Also note that register <b
style='mso-bidi-font-weight:normal'><span style='font-family:Courier'>r3</span></b>
will be immediately changed by both CPUs and, moreover, <b style='mso-bidi-font-weight:
normal'><span style='font-family:Courier'>r3</span></b> will be given different
values by each CPU.<span style="mso-spacerun: yes">&nbsp; </span>Since each CPU
has its own set of registers, this is fine.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>More generally, notice that
whenever we start a new thread, it must be started as a “fork” to an existing
thread and that the entire state of the previous thread must be copied to
create a starting state for the new thread.<span style="mso-spacerun:
yes">&nbsp; </span>A copy must be made&#8212;it cannot be shared&#8212;because
the moment the new thread begins executing, its state will change and diverge
from the other thread’s state.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The OS
Kernel<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The scheduler to be described
here runs on a single CPU.<span style="mso-spacerun: yes">&nbsp; </span>It
provides the illusion of multiple CPUs by implementing threads and
time-slicing.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We’ll discuss the fork operation
in detail later, but in short, the fork operation will create a new thread,
making a copy of the previous thread’s state, and will initiate the execution
of the new thread.<span style="mso-spacerun: yes">&nbsp; </span>After the fork
operation, there will be one more thread than before.<span style="mso-spacerun:
yes">&nbsp; </span>Conceptually, both threads will begin executing
simultaneously, in parallel.<span style="mso-spacerun: yes">&nbsp; </span>But
since there is only a single CPU, only one of the threads at a time can be
given a time-slice while the other thread will have to wait for its turn to
run.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The thread scheduler we are about
to describe here will go on to be used as the core of an operating system
kernel in the BLITZ project.<span style="mso-spacerun: yes">&nbsp;
</span>However, this document will concern itself only with the thread
scheduler, which can be understood and used in isolation.<span
style="mso-spacerun: yes">&nbsp; </span>While this thread scheduler will be
embedded within a kernel later, we will describe it here as a stand-alone
program.<span style="mso-spacerun: yes">&nbsp; </span>We will not discuss any
of the other functions of an operating system, such as user-level processes,
virtual memory and paging, or device I/O.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>You can have a thread scheduler
without any other parts of the operating system, but you really can’t have an
operating system without a thread scheduler.<span style="mso-spacerun:
yes">&nbsp; </span>The code we describe here consists of only the thread
scheduler and some concurrency control operations.<span style="mso-spacerun:
yes">&nbsp; </span>We’ll show how to write multithreaded code using the
functionality provided by the scheduler.<span style="mso-spacerun: yes">&nbsp;
</span>Later, the other functions of the operating system can be added to the code
body discussed here.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>An operating system kernel is, in
some sense, just another program.<span style="mso-spacerun: yes">&nbsp;
</span>However, unlike other programs, the kernel is loaded directly into the
computer’s memory during the booting process.<span style="mso-spacerun:
yes">&nbsp; </span>All other programs are loaded into memory by the operating
system and are tightly controlled by the operating system.<span
style="mso-spacerun: yes">&nbsp; </span>All other programs assume the presence
of an OS.<span style="mso-spacerun: yes">&nbsp; </span>In order to communicate
with the outside world&#8212;for example, to talk to users or access files on
the disk&#8212;programs must interact with the OS.<span style="mso-spacerun:
yes">&nbsp; </span>On the other hand, the OS will interact directly with the
hardware devices, such as the terminal console and the disk.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The scheduler code we’ll discuss
here, which is meant to form the core of an OS kernel, is a standalone program
which will be loaded directly into physical memory, during a sort of “boot”
process.<span style="mso-spacerun: yes">&nbsp; </span>The code discussed here
will not be run on top of an operating system.<span style="mso-spacerun:
yes">&nbsp; </span>In fact, there will be no other code in memory but the
program discussed here.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Since there is no operating system
below it, this scheduling program will have to include all the functionality it
needs.<span style="mso-spacerun: yes">&nbsp; </span>It can’t invoke the
operating system to do anything.<span style="mso-spacerun: yes">&nbsp;
</span>As a consequence, any subroutine or function that might be needed must
be included directly and linked into the executable.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The Thread
Scheduler<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ thread scheduler uses
the simplest possible scheduling algorithm.<span style="mso-spacerun:
yes">&nbsp; </span>It maintains a collection of all the threads&#8212;called
the <i style='mso-bidi-font-style:normal'>ready list</i>&#8212;and runs them in
<i style='mso-bidi-font-style:normal'>round-robin</i> fashion.<span
style="mso-spacerun: yes">&nbsp; </span>There are no priority levels nor are
there multiple ready queues.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Each time the scheduler is
invoked, the first thread on the ready list is selected and executed on the
CPU.<span style="mso-spacerun: yes">&nbsp; </span>The thread is executed until
the next timer interrupt, at which time the thread is placed at the tail end of
the ready list.<span style="mso-spacerun: yes">&nbsp; </span>Then, the next
thread is taken from the front of the ready list and executed.<span
style="mso-spacerun: yes">&nbsp; </span>Each thread will get roughly a full
slice of time; only the scheduling overhead at the beginning of the time-slice
is lost.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Each thread is represented by a
data structure called a <b style='mso-bidi-font-weight:normal'>Thread</b>.<span
style="mso-spacerun: yes">&nbsp; </span>The KPL language supports classes and
object-oriented programming and there is a class called <b style='mso-bidi-font-weight:
normal'>Thread</b>.<span style="mso-spacerun: yes">&nbsp; </span>Each instance
(or object) in this class represents an individual thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>For reference, here is the
definition of the class called <b style='mso-bidi-font-weight:normal'>Thread</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-size:10.0pt;font-family:Courier'>class</span></u><span
style='font-size:10.0pt;font-family:Courier'> Thread<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>superclass</u>
Listable<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>regs: <u>array</u> [13] <u>of</u> <u>int</u><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-- Space for r2..r14<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>stackTop: <u>ptr</u> <u>to</u> <u>void</u><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-- Space for r15 (system
stack top ptr)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>name: <u>ptr</u> <u>to</u> <u>array</u> <u>of</u> <u>char</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>status: <u>int</u><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>-- JUST_CREATED,READY,RUNNING,BLOCKED,UNUSED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>initialFunction:
<u>ptr</u> <u>to</u> <u>function</u> (<u>int</u>)<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>-- The thread's &quot;main&quot; function<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><span
style="mso-spacerun: yes">&nbsp;&nbsp;</span>initialArgument: <u>int</u><span
style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>-- The argument to that function<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>systemStack: <u>array</u> [SYSTEM_STACK_SIZE] <u>of</u> <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Init (n: <u>ptr</u> <u>to</u> <u>array</u> <u>of</u> <u>char</u>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Fork (fun: <u>ptr</u> <u>to</u> <u>function</u> (<u>int</u>), arg: <u>int</u>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Yield ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Sleep ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>CheckOverflow ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Print ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-size:10.0pt;font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>First, some remarks about the KPL
language:<span style="mso-spacerun: yes">&nbsp; </span>In this document, the
keywords of the language are underlined.<span style="mso-spacerun: yes">&nbsp;
</span>Comments begin with two hyphens (<span style='font-family:Courier'>--</span>).</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The data types in KPL should be
familiar to anyone who knows C++ or Java.<span style="mso-spacerun: yes">&nbsp;
</span>Basic types include <u><span style='font-family:Courier'>int</span></u>,
<u><span style='font-family:Courier'>char</span></u>, <u><span
style='font-family:Courier'>double</span></u>, and <u><span style='font-family:
Courier'>bool</span></u>.<span style="mso-spacerun: yes">&nbsp; </span>KPL also
allows pointers and arrays.<span style="mso-spacerun: yes">&nbsp; </span>Some
more complicated types from the above example are given below.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>int</span></u><span style='font-family:Courier'><span
style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>-- A 32-bit signed integer<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>array</span></u><span style='font-family:Courier'>
[13] <u>of</u> <u>int</u><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-- An array of 13 ints<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>array</span></u><span style='font-family:Courier'> <u>of</u>
<u>char</u><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-- An array
of chars, with unspecified size<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>ptr</span></u><span style='font-family:Courier'> <u>to</u>
<u>array</u> <u>of</u> <u>char</u><span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>-- A pointer to an array of chars<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>ptr</span></u><span style='font-family:Courier'> <u>to</u>
<u>void</u><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span
style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>-- A pointer to
anything<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
(<u>int</u>)<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-- A function
taking a single int argument<u><o:p></o:p></u></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>ptr</span></u><span style='font-family:Courier'> <u>to</u>
<u>function</u> (<u>int</u>)<span style="mso-spacerun: yes">&nbsp; </span>-- A
pointer to such a function<u><o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In KPL, each class is defined
with two things: a <i style='mso-bidi-font-style:normal'>class specification</i>
and a <i style='mso-bidi-font-style:normal'>class implementation</i>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The code given above is an
example of a class specification.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A class specification tells which
fields (i.e., data members) are in the class, after the <u><span
style='font-family:Courier'>fields</span></u> keyword).<span
style="mso-spacerun: yes">&nbsp; </span>It also tells which methods (i.e.,
member functions) are implemented in the class, after the <u><span
style='font-family:Courier'>methods</span></u> keyword.<span
style="mso-spacerun: yes">&nbsp; </span>A class specification also shows where,
in the hierarchy of classes and superclasses, the class lives, after the <u><span
style='font-family:Courier'>superclass</span></u> keyword. </p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This specification indicates that
<b style='mso-bidi-font-weight:normal'>Thread</b> is a subclass of a class
called <b style='mso-bidi-font-weight:normal'>Listable</b>, i.e., the superclass
of <b style='mso-bidi-font-weight:normal'>Thread</b> is <b style='mso-bidi-font-weight:
normal'>Listable</b>.<span style="mso-spacerun: yes">&nbsp; </span>(We’ll
discuss <b style='mso-bidi-font-weight:normal'>Listable</b> later.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A class implementation gives the
method bodies (i.e., the code of the methods).<span style="mso-spacerun:
yes">&nbsp; </span>The class implementation for <b style='mso-bidi-font-weight:
normal'>Thread</b> is not shown here, but we’ll look at the code of several of
the methods below, as we discuss how the scheduler works.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Let us comment here about each
field in a <b style='mso-bidi-font-weight:normal'>Thread</b> object.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The CPU contains 16 general
purpose registers, called <b style='mso-bidi-font-weight:normal'>r0</b> through
<b style='mso-bidi-font-weight:normal'>r15</b>.<span style="mso-spacerun:
yes">&nbsp; </span>Register <b style='mso-bidi-font-weight:normal'>r0</b>
always has a value of zero, which provides handy access to a commonly needed
constant, namely zero.<span style="mso-spacerun: yes">&nbsp;
</span>Instructions may also use <b style='mso-bidi-font-weight:normal'>r0</b>
when a result should be discarded.<span style="mso-spacerun: yes">&nbsp;
</span>Consequently, we’ll never need to save <b style='mso-bidi-font-weight:
normal'>r0</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the BLITZ architecture,
register <b style='mso-bidi-font-weight:normal'>r15</b> has a unique and
important role: it is the <i style='mso-bidi-font-style:normal'>stack pointer</i>.<span
style="mso-spacerun: yes">&nbsp; </span>During <span style='font-family:Courier'>call</span>
instructions, a return address is pushed onto the stack, using <b
style='mso-bidi-font-weight:normal'>r15</b>.<span style="mso-spacerun:
yes">&nbsp; </span>During a return (<span style='font-family:Courier'>ret</span>)
instruction, the return address is popped using <b style='mso-bidi-font-weight:
normal'>r15</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When a thread is running, the CPU
registers will contain values that change as instructions are executed.<span
style="mso-spacerun: yes">&nbsp; </span>But when a thread is suspended (e.g.,
stopped to let another thread use the CPU), we’ll need to save the state of the
CPU.<span style="mso-spacerun: yes">&nbsp; </span>In particular, we need to put
the contents of the registers (as used by the suspended thread) somewhere while
other threads use the registers.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The first field in <b
style='mso-bidi-font-weight:normal'>Thread</b> is named <b style='mso-bidi-font-weight:
normal'>regs</b>.<span style="mso-spacerun: yes">&nbsp; </span>It is an array
with enough space to store registers <b style='mso-bidi-font-weight:normal'>r2</b>
through <b style='mso-bidi-font-weight:normal'>r14</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Later, we’ll see why we never need to
store register <b style='mso-bidi-font-weight:normal'>r1</b>.<span
style="mso-spacerun: yes">&nbsp; </span>By the way, arrays in KPL are numbered
from zero, just like in Java or “C”.<span style="mso-spacerun: yes">&nbsp;
</span>Thus register <b style='mso-bidi-font-weight:normal'>r2</b> will be
stored in <b style='mso-bidi-font-weight:normal'>regs[0]</b>, and so on, up to <b
style='mso-bidi-font-weight:normal'>r14</b> in <b style='mso-bidi-font-weight:
normal'>regs[12]</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next field <b
style='mso-bidi-font-weight:normal'>stackTop</b> will hold the value of
register <b style='mso-bidi-font-weight:normal'>r15</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next field is called <b
style='mso-bidi-font-weight:normal'>name</b>.<span style="mso-spacerun:
yes">&nbsp; </span>It holds a pointer to a string which, in KPL, is an array of
characters.<span style="mso-spacerun: yes">&nbsp; </span>Each thread is given a
name, which is useful when printing certain error messages.<span
style="mso-spacerun: yes">&nbsp; </span>Conceptually, threads don’t need to
have names and in some operating systems threads are referred to by numbers or
by the addresses in memory of their <b style='mso-bidi-font-weight:normal'>Thread</b>
objects.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next field is called <b
style='mso-bidi-font-weight:normal'>status</b>, which contains an integer code
number.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>KPL includes an ability to equate
a sequence of numbers with names, via a construct called an <i
style='mso-bidi-font-style:normal'>enum</i>.<span style="mso-spacerun:
yes">&nbsp; </span>The following KPL code assigns the numbers 1, 2, 3, and so
on, to constants named <b style='mso-bidi-font-weight:normal'>JUST_CREATED</b>,
<b style='mso-bidi-font-weight:normal'>READY</b>, <b style='mso-bidi-font-weight:
normal'>RUNNING</b>, <b style='mso-bidi-font-weight:normal'>BLOCKED</b>, and <b
style='mso-bidi-font-weight:normal'>UNUSED</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>enum</span></u><span style='font-family:Courier'>
JUST_CREATED, READY, RUNNING, BLOCKED, UNUSED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next field is called <b
style='mso-bidi-font-weight:normal'>initialFunction</b>, which contains a
pointer to a function.<span style="mso-spacerun: yes">&nbsp; </span>This
function is the thread’s “main” function and is the function that will be
executed when the thread begins execution.<span style="mso-spacerun:
yes">&nbsp; </span>It takes a single integer as an argument and returns
nothing.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next field is called <b
style='mso-bidi-font-weight:normal'>initialArgument</b>.<span
style="mso-spacerun: yes">&nbsp; </span>It contains an integer, which will be
passed to the initial function when the thread is first started.<span
style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>initialFunction</b> and <b style='mso-bidi-font-weight:normal'>initialArgument</b>
fields are only used when starting a thread and are not used after that.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The last field is called <b
style='mso-bidi-font-weight:normal'>systemStack</b> and is an array of 4000
bytes.<span style="mso-spacerun: yes">&nbsp; </span>The size of an integer is 4
bytes and the size of the array is determined by the following constant
definition:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>const<o:p></o:p></span></u></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp;
</span>SYSTEM_STACK_SIZE = 1000<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>By the way, all of the material
discussed so far is in the file named <b style='mso-bidi-font-weight:normal'>Thread.h</b>.<span
style="mso-spacerun: yes">&nbsp; </span>The following files will be discussed
in this document:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Thread.h<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Thread.c<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Runtime.s<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Switch.s<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>System.h<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>System.c<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Synch.h<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Synch.c<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>List.h<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>List.c<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>These files can be found at:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><a
href="http://web.cecs.pdx.edu/~harry/Blitz/OSProject/p2/"><span
style='font-family:Courier'>http://web.cecs.pdx.edu/~harry/Blitz/OSProject/p2/</span></a><span
style='font-family:Courier'><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Linked
Lists<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Class <b style='mso-bidi-font-weight:
normal'>Thread</b> is a subclass of class <b style='mso-bidi-font-weight:normal'>Listable</b>
and consequently <b style='mso-bidi-font-weight:normal'>Thread</b> objects may
be placed on linked lists.<span style="mso-spacerun: yes">&nbsp; </span>The <b
style='mso-bidi-font-weight:normal'>Listable</b> superclass essentially
provides a field called <b style='mso-bidi-font-weight:normal'>next</b>, which
points to the next <b style='mso-bidi-font-weight:normal'>Thread</b>
object.<span style="mso-spacerun: yes">&nbsp; </span>Therefore, every <b
style='mso-bidi-font-weight:normal'>Thread</b> object inherits a <b
style='mso-bidi-font-weight:normal'>next</b> field from <b style='mso-bidi-font-weight:
normal'>Listable</b>.<span style="mso-spacerun: yes">&nbsp; </span>Since each
object has only one <b style='mso-bidi-font-weight:normal'>next</b> pointer, a <b
style='mso-bidi-font-weight:normal'>Thread</b> object cannot be placed on more
than one linked list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Linked lists are “singly linked”,
which means that each element in the list has a “next” pointer but no “prev”
pointer.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>There is also another class named
<b style='mso-bidi-font-weight:normal'>List[]</b>.<span style="mso-spacerun:
yes">&nbsp; </span>An instance of this class will represent the list as a
whole.<span style="mso-spacerun: yes">&nbsp; </span>A <b style='mso-bidi-font-weight:
normal'>List[]</b> object contains two fields called <b style='mso-bidi-font-weight:
normal'>first</b> and <b style='mso-bidi-font-weight:normal'>last</b>, which
point to the elements at each end of the list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>By maintaining pointers to both
first and last elements, adding an element to either the front end or the tail
end of the list is efficient.<span style="mso-spacerun: yes">&nbsp;
</span>However, since the elements do not contain “prev” pointers, removal of
any element besides the first element is not supported by the class.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The class <b style='mso-bidi-font-weight:
normal'>List[]</b> is an example of a parameterized class in the KPL language.<span
style="mso-spacerun: yes">&nbsp; </span>To define a variable of type <b
style='mso-bidi-font-weight:normal'>List[]</b>, the programmer must specify a
type, such as <b style='mso-bidi-font-weight:normal'>Thread</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Below is a collection of
important variable definitions.<span style="mso-spacerun: yes">&nbsp;
</span>These variables are global variables, which means that they are
accessible from all methods and functions.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
padding:1.0pt 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><u><span style='font-size:
10.0pt;font-family:Courier'>var<o:p></o:p></span></u></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>readyList: List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>currentThread: <u>ptr</u> <u>to</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>mainThread: Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>idleThread: Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>threadsToBeDestroyed:<span style="mso-spacerun: yes">&nbsp; </span>List
[Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt'><span style='font-size:
10.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>currentInterruptStatus: <u>int</u><o:p></o:p></span></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We’ll describe these variables
more later, but notice that both <b style='mso-bidi-font-weight:normal'>readyList</b>
and <b style='mso-bidi-font-weight:normal'>threadsToBeDestroyed</b> are lists
of <b style='mso-bidi-font-weight:normal'>Thread</b> objects.<span
style="mso-spacerun: yes">&nbsp; </span>The type-checking system of KPL is
strong and safe enough to assure that only <b style='mso-bidi-font-weight:normal'>Thread</b>
objects are placed on these two lists.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the specification of <b
style='mso-bidi-font-weight:normal'>List[]</b> and <b style='mso-bidi-font-weight:
normal'>Listable</b>, with some simplifications that can safely be ignored.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-size:10.0pt;font-family:Courier'>class</span></u><span
style='font-size:10.0pt;font-family:Courier'> List [T: Listable]<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>superclass</u>
Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>first: <u>ptr</u> <u>to</u> T<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>last: <u>ptr</u> <u>to</u> T<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>AddToFront (p: <u>ptr</u> <u>to</u> T)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>AddToEnd (p: <u>ptr</u> <u>to</u> T)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>IsEmpty () <u>returns</u> <u>bool</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Remove () <u>returns</u> <u>ptr</u> <u>to</u> T<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>ApplyToEach (f: <u>ptr</u> <u>to</u> <u>function</u> (<u>ptr</u> <u>to</u>
T))<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><u><span style='font-size:
10.0pt;font-family:Courier'>endClass<o:p></o:p></span></u></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><u><span style='font-size:
10.0pt;font-family:Courier'>class</span></u><span style='font-size:10.0pt;
font-family:Courier'> Listable<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>superclass</u>
Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-size:10.0pt;
font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>next: <u>ptr</u> <u>to</u> Listable<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-size:10.0pt;font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Note that we have operations to
add a <b style='mso-bidi-font-weight:normal'>Thread</b> to the head of a list (<b
style='mso-bidi-font-weight:normal'>AddToFront</b>), to add a <b
style='mso-bidi-font-weight:normal'>Thread</b> to the tail of a list (<b
style='mso-bidi-font-weight:normal'>AddToEnd</b>), to test whether a list is
empty (<b style='mso-bidi-font-weight:normal'>IsEmpty</b>) and to remove and
return a <b style='mso-bidi-font-weight:normal'>Thread</b> from the front of
the list (<b style='mso-bidi-font-weight:normal'>Remove</b>).<span
style="mso-spacerun: yes">&nbsp; </span>These methods work with pointers to <b
style='mso-bidi-font-weight:normal'>Thread</b> objects.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>There is also a method called <b
style='mso-bidi-font-weight:normal'>ApplyToEach</b> which is passed a
function&#8212;or more precisely, a pointer to a function.<span
style="mso-spacerun: yes">&nbsp; </span><b style='mso-bidi-font-weight:normal'>ApplyToEach</b>
will invoke that function once for each element of the list, supplying that
element to the function.<span style="mso-spacerun: yes">&nbsp; </span>For
example, there is a function called <b style='mso-bidi-font-weight:normal'>ThreadPrint</b>
which will print the contents of a <b style='mso-bidi-font-weight:normal'>Thread</b>
object in human-readable form.<span style="mso-spacerun: yes">&nbsp; </span>To
print the entire <b style='mso-bidi-font-weight:normal'>readyList</b>, use this
code:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>readyList.ApplyToEach (ThreadPrint)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The code for the classes <b
style='mso-bidi-font-weight:normal'>List[] </b>and <b style='mso-bidi-font-weight:
normal'>Listable</b> is in the files <b style='mso-bidi-font-weight:normal'>List.h</b>
and <b style='mso-bidi-font-weight:normal'>List.c</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We should note that this approach
to handling lists, while adequate for our purposes, is somewhat less complex
than what other OS kernels do.<span style="mso-spacerun: yes">&nbsp; </span>For
example, in Linux, a single object might participate in several kinds of list
and might in fact be on two, unrelated lists simultaneously; our single <b
style='mso-bidi-font-weight:normal'>next</b> field is inadequate to allow a <b
style='mso-bidi-font-weight:normal'>Thread</b> object to be placed on more than
one list.<span style="mso-spacerun: yes">&nbsp; </span>Fortunately, in our
system, a <b style='mso-bidi-font-weight:normal'>Thread</b> will never be on
more than one list at a time.<span style="mso-spacerun: yes">&nbsp;
</span>Also, in Linux, lists are kept doubly linked, with both “next” and
“prev” pointers, which allows elements to be removed efficiently from any place
in the list, not just the front.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Variable
Initialization<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In KPL, all global variables,
like the ones shown above, will be initialized to zero values, unless a
specific initial value is given.<span style="mso-spacerun: yes">&nbsp;
</span>For example, the variable named <b style='mso-bidi-font-weight:normal'>currentInterruptStatus</b>&#8212;an
integer&#8212;will be initialized to zero.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The variable named <b
style='mso-bidi-font-weight:normal'>currentThread</b> is a pointer; even with
no explicit initialization, KPL guarantees that it will be initialized to the
“null” value.<span style="mso-spacerun: yes">&nbsp; </span>In KPL it is common
to rely on this initialization when a zero or null initial value is desired, so
it is common to see code where variables are not explicitly initialized.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The remaining variables (<b
style='mso-bidi-font-weight:normal'>readyList</b>, <b style='mso-bidi-font-weight:
normal'>mainThread</b>, <b style='mso-bidi-font-weight:normal'>idleThread</b>, <b
style='mso-bidi-font-weight:normal'>currentInterruptStatus</b>) will contain
objects.<span style="mso-spacerun: yes">&nbsp; </span>Note that these four
variables do not contain pointers to objects (like <b style='mso-bidi-font-weight:
normal'>currentThread</b> does), but have enough bytes allocated to hold the
entire object.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Variables containing objects must
always be initialized properly before use.<span style="mso-spacerun:
yes">&nbsp; </span>This is because each object contains a hidden field pointing
to its class.<span style="mso-spacerun: yes">&nbsp; </span>This hidden “class”
pointer is used during method lookup to dynamically select the correct methods,
just as in other object-oriented languages.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the case of the variables
named <b style='mso-bidi-font-weight:normal'>mainThread</b> and <b
style='mso-bidi-font-weight:normal'>idleThread</b>, we see no explicit initialization,
so these variables are not usable until initialized.<span style="mso-spacerun:
yes">&nbsp; </span>These variables are initialized with this code in the
function called <b style='mso-bidi-font-weight:normal'>InitializeScheduler</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>mainThread = <u>new</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>idleThread = <u>new</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In KPL, the “new” expression creates
a new object&#8212;of class <b style='mso-bidi-font-weight:normal'>Thread</b>
in this case&#8212;with all fields initialized to zero values.<span
style="mso-spacerun: yes">&nbsp; </span>That object is then copied into the
variable and the variable is ready to go.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The variables <b
style='mso-bidi-font-weight:normal'>readyList</b> and <b style='mso-bidi-font-weight:
normal'>threadsToBeDestroyed</b> also require initialization before use.<span
style="mso-spacerun: yes">&nbsp; </span>They are initialized with this code in
the same function:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>readyList = <u>new</u> List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>threadsToBeDestroyed = <u>new</u> List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Any attempt to use a variable which
contains an object before it is initialized is an error.<span
style="mso-spacerun: yes">&nbsp; </span>The runtime system will check for this
error and will print the error message “Attempt to use an uninitialized object!”
if it occurs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A similar initialization of
arrays is required in KPL.<span style="mso-spacerun: yes">&nbsp; </span>Each
array carries its size with it in KPL, unlike in the “C” language.<span
style="mso-spacerun: yes">&nbsp; </span>When an array is initialized, the size
is changed from zero to the number of elements in the array.<span
style="mso-spacerun: yes">&nbsp; </span>After that, the array size cannot be
changed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>For example, each <b
style='mso-bidi-font-weight:normal'>Thread</b> object contains an field called <b
style='mso-bidi-font-weight:normal'>systemStack</b>, defined as:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>systemStack: <u>array</u> [SYSTEM_STACK_SIZE] <u>of</u>
<u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This array could be initialized
with this code:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>systemStack = <u>new</u> <u>array</u> <u>of</u> <u>int</u>
{SYSTEM_STACK_SIZE <u>of</u> -1}<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This will initialize the size and
will initialize each element to -1.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>For every array access, the KPL
compiler produces code that will perform index bounds checking, so if an
attempt is made to access an element that is beyond the end of the array, the
system will print something like “This array index is out-of-range!”</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In fact, to avoid repetitively
copying in the initial values, the actual code&#8212;shown below&#8212;does
something rather tricky: it simply stores an integer into the (normally hidden)
array size field.<span style="mso-spacerun: yes">&nbsp; </span>In order to do
this, the programmer must explicitly go around the strong, static type-checking
done by the KPL compiler.<span style="mso-spacerun: yes">&nbsp; </span>The
following code is “type unsafe” and a bit risky; a mistake here could lead to a
system crash.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>*((&amp; systemStack) <u>asPtrTo</u> <u>int</u>) =
SYSTEM_STACK_SIZE<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The States
of a Thread<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>status</b> field in a <b style='mso-bidi-font-weight:normal'>Thread</b>
object tells what state the thread is in.<span style="mso-spacerun: yes">&nbsp;
</span>A thread that has possession of the CPU and is executing will have a <b
style='mso-bidi-font-weight:normal'>status</b> of <b style='mso-bidi-font-weight:
normal'>RUNNING</b>.<span style="mso-spacerun: yes">&nbsp; </span>At any time,
only one thread will have a status of <b style='mso-bidi-font-weight:normal'>RUNNING</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At some point, a timer interrupt
will occur and the current thread’s time-slice will end.<span
style="mso-spacerun: yes">&nbsp; </span>At that point, the scheduler will suspend
that thread and begin executing some other thread.<span style="mso-spacerun:
yes">&nbsp; </span>The previously running thread will be given a status of <b
style='mso-bidi-font-weight:normal'>READY</b> and the next thread to be
scheduled will have its status changed to <b style='mso-bidi-font-weight:normal'>RUNNING</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Nothing prevents a thread with a <b
style='mso-bidi-font-weight:normal'>READY</b> status from running, other than
the fact that the CPU is busy running some other thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Sometimes a thread will be forced
to wait for some event.<span style="mso-spacerun: yes">&nbsp; </span>For
example, a thread may be waiting for some data that will be produced in the
future by another thread.<span style="mso-spacerun: yes">&nbsp; </span>Such a
waiting thread cannot be run, even if the CPU becomes available.<span
style="mso-spacerun: yes">&nbsp; </span>This thread will have a status of <b
style='mso-bidi-font-weight:normal'>BLOCKED</b>.<span style="mso-spacerun:
yes">&nbsp; </span>A blocked thread will not become <b style='mso-bidi-font-weight:
normal'>READY</b> until some other thread takes action to un-block it.<span
style="mso-spacerun: yes">&nbsp; </span><b style='mso-bidi-font-weight:normal'>BLOCKED</b>
threads are in some sense frozen and suspended from making progress.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>During the process of creating a
new thread, the <b style='mso-bidi-font-weight:normal'>Thread</b> object will
first be initialized and will then be scheduled to run.<span
style="mso-spacerun: yes">&nbsp; </span>As part of the initialization process,
before the thread becomes <b style='mso-bidi-font-weight:normal'>READY</b>, it
will be given a status of <b style='mso-bidi-font-weight:normal'>JUST_CREATED</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Each <b style='mso-bidi-font-weight:
normal'>Thread</b> object normally represents an active thread.<span
style="mso-spacerun: yes">&nbsp; </span>But after a thread terminates, it will
never run again and its <b style='mso-bidi-font-weight:normal'>Thread</b>
object no longer represents a valid, runnable thread.<span style="mso-spacerun:
yes">&nbsp; </span>At this point, the <b style='mso-bidi-font-weight:normal'>status</b>
field in the object will be changed to <b style='mso-bidi-font-weight:normal'>UNUSED</b>,
indicating that the thread has terminated.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'>Thread</b> objects are a limited resource and must be managed carefully
by any kernel.<span style="mso-spacerun: yes">&nbsp; </span>In particular,
rather than simply freeing the associated <b style='mso-bidi-font-weight:normal'>Thread</b>
object, the BLITZ kernel will maintain a pool of free, unused <b
style='mso-bidi-font-weight:normal'>Thread</b> objects.<span
style="mso-spacerun: yes">&nbsp; </span>Technically, the <b style='mso-bidi-font-weight:
normal'>UNUSED</b> status is redundant and unnecessary; the presence of a <b
style='mso-bidi-font-weight:normal'>Thread</b> object on this free list is
sufficient to indicate that a <b style='mso-bidi-font-weight:normal'>Thread</b>
object is unused.<span style="mso-spacerun: yes">&nbsp; </span>Nevertheless,
the <b style='mso-bidi-font-weight:normal'>UNUSED</b> status will help guard
against programming errors.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Allocating
and Freeing Objects<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The KPL language has a facility
for creating new objects on a “heap”.<span style="mso-spacerun: yes">&nbsp;
</span>For example:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>var</span></u><span style='font-family:Courier'> p:
<u>ptr</u> <u>to</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>p = <u>alloc</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>free</span></u><span style='font-family:Courier'> p<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Several aspects of traditional
heap allocation and management make heap usage unacceptable for kernel
code.<span style="mso-spacerun: yes">&nbsp; </span>First, the heap may be too
small and may fill up, causing the kernel itself to fail.<span
style="mso-spacerun: yes">&nbsp; </span>But any extra space allocated to a
kernel heap to prevent it from filling up results in permanently lost physical
memory and a kernel should optimize its use of memory, in order to make more
available to user-level programs.<span style="mso-spacerun: yes">&nbsp;
</span>Second, an automatic garbage collector can introduce unpredictable and
unacceptable pauses in the kernel.<span style="mso-spacerun: yes">&nbsp;
</span>Finally, the heap and the objects in the heap are generally accessed by
many different threads, further complicating any automatic garbage collection
or heap management.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Instead, the approach taken in
systems like Linux involves a complex memory management scheme.<span
style="mso-spacerun: yes">&nbsp; </span>Linux has something called the “slab
allocator”.<span style="mso-spacerun: yes">&nbsp; </span>You can request
allocations of memory and, when done with the memory, it can be returned to the
slab allocator.<span style="mso-spacerun: yes">&nbsp; </span>Linux’s slab
allocator is quite complex.<span style="mso-spacerun: yes">&nbsp; </span>For
each allocation, you must include many flags to specify things like how to
handle the situation when memory is limited.<span style="mso-spacerun:
yes">&nbsp; </span>(For example, the allocator could wait, or it could free
non-essential objects, or it could just return with failure.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ approach is simpler.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We will restrict ourselves to
allocating objects on the heap only during initialization and startup.<span
style="mso-spacerun: yes">&nbsp; </span>However, after startup, no new objects
will be allocated on the heap.<span style="mso-spacerun: yes">&nbsp; </span>By
following this convention, an “out of memory” condition cannot occur after
startup.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Since there is no risk of
overflowing the heap after startup, objects allocated on the heap never need to
be freed.<span style="mso-spacerun: yes">&nbsp; </span>KPL has a <u><span
style='font-family:Courier'>free</span></u> statement, but we will never use
it.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>But how shall we deal with the
problem of memory resource allocation after startup?</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>For example, after startup and
the BLITZ kernel is running, there will occasionally be a demand for new <b
style='mso-bidi-font-weight:normal'>Thread</b> objects as new threads are
forked.<span style="mso-spacerun: yes">&nbsp; </span>And as those threads
terminate, their <b style='mso-bidi-font-weight:normal'>Thread</b> objects will
become free and available for re-use.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The kernel will maintain a <i
style='mso-bidi-font-style:normal'>free list</i> (or <i style='mso-bidi-font-style:
normal'>free pool</i>) of <b style='mso-bidi-font-weight:normal'>Thread</b>
objects.<span style="mso-spacerun: yes">&nbsp; </span>When a <b
style='mso-bidi-font-weight:normal'>Thread</b> object is no longer needed, it
will be returned to this free list.<span style="mso-spacerun: yes">&nbsp;
</span>The kernel will startup with a fixed, predetermined number of <b
style='mso-bidi-font-weight:normal'>Thread</b> objects in the free list and
this number can not be increased.<span style="mso-spacerun: yes">&nbsp;
</span>This fixed supply of <b style='mso-bidi-font-weight:normal'>Thread</b>
objects will limit the number of active threads our kernel can accommodate at
any one time.<span style="mso-spacerun: yes">&nbsp; </span>If an attempt is
made by some thread to create a new thread when there are already a lot of
threads, it will be forced to wait if there are no <b style='mso-bidi-font-weight:
normal'>Thread</b> objects on the free list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>With many threads running and
each able to create a new thread at any time, the management of the <b
style='mso-bidi-font-weight:normal'>Thread</b> free list will require
concurrency control.<span style="mso-spacerun: yes">&nbsp; </span>The free list
is an object which is shared among many threads and, as such, it cannot be
programmed without careful consideration of synchronization and concurrency
control.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The thread scheduler discussed
here does not include the free list of <b style='mso-bidi-font-weight:normal'>Thread</b>
objects.<span style="mso-spacerun: yes">&nbsp; </span>In this document, we are
describing only the scheduler, not the rest of the kernel.<span
style="mso-spacerun: yes">&nbsp; </span>This document will describe several
concurrency control structures which may be used to implement control over the
free list, but the management of <b style='mso-bidi-font-weight:normal'>Thread</b>
objects is outside the scope of the scheduler and is part of the kernel at
large.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In KPL, objects may be allocated <i
style='mso-bidi-font-style:normal'>dynamically</i> (on the heap) or allocated <i
style='mso-bidi-font-style:normal'>statically</i> (using variables).</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is some example code which
allocates a <b style='mso-bidi-font-weight:normal'>Thread</b> object on the
heap (i.e., dynamically) and then calls a function to print it:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>var</span></u><span style='font-family:Courier'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span>p: <u>ptr</u>
<u>to</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>p = alloc Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>ThreadPrint (p)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is a second, similar example
which uses a statically allocated <b style='mso-bidi-font-weight:normal'>Thread</b>
object stored in a variable named <b style='mso-bidi-font-weight:normal'>t</b>.
</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>var</span></u><span style='font-family:Courier'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span>p: <u>ptr</u>
<u>to</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp; </span>t:
Thread = <u>new</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>p = &amp;t<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>ThreadPrint (p)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the last statement, the
programmer would probably avoid the variable <b style='mso-bidi-font-weight:
normal'>p</b> altogether and simply write:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>ThreadPrint (&amp;t)</span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The variable <b style='mso-bidi-font-weight:
normal'>t</b> could be a <i style='mso-bidi-font-style:normal'>global variable</i>
(which is allocated outside any function) or a <i style='mso-bidi-font-style:
normal'>local variable</i> (which is allocated on the call stack).<span
style="mso-spacerun: yes">&nbsp; </span>However, if you are working with
pointers to local objects, you must be careful to remember that the object’s
memory will be reclaimed when the relevant function returns!</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In using the scheduler code
described here, <b style='mso-bidi-font-weight:normal'>Thread</b> objects may
either be allocated on the heap, as in the first example above, or stored
directly in variables, as in the second example.<span style="mso-spacerun:
yes">&nbsp; </span>Whenever a thread terminates, the scheduler will give the <b
style='mso-bidi-font-weight:normal'>Thread</b> object a status of <b
style='mso-bidi-font-weight:normal'>UNUSED</b>.<span style="mso-spacerun:
yes">&nbsp; </span>The scheduler will do nothing further; in particular, a <b
style='mso-bidi-font-weight:normal'>Thread</b> objects that as allocated on the
heap will not be freed and the object will continue to exist.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Later, when you build a kernel on
top of this scheduler, you’ll add code to recycle unused <b style='mso-bidi-font-weight:
normal'>Thread</b> objects by managing a free list of <b style='mso-bidi-font-weight:
normal'>Thread</b> objects.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The State
of the CPU<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At all times, the BLITZ processor
is running in one of two different modes, called System Mode and User
Mode.<span style="mso-spacerun: yes">&nbsp; </span>All code discussed in this
document will be running in System Mode, including both the code of the
scheduler and the code of all the threads.<span style="mso-spacerun:
yes">&nbsp; </span>Since all threads will run in System Mode, we might call
them <i style='mso-bidi-font-style:normal'>kernel threads</i>&#8212;as opposed
to <i style='mso-bidi-font-style:normal'>user threads</i> which run in User
Mode&#8212;but we are discussing the scheduler in isolation, not the kernel, so
the concept of user threads is not really even meaningful here.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At any time, the CPU either has
interrupts <i style='mso-bidi-font-style:normal'>enabled</i> or <i
style='mso-bidi-font-style:normal'>disabled</i>.<span style="mso-spacerun:
yes">&nbsp; </span>When interrupts are enabled and an interrupt
occurs&#8212;for example, a timer interrupt&#8212;the execution of the current
code will be interrupted and a jump will be made to an interrupt handler
routine.<span style="mso-spacerun: yes">&nbsp; </span>When an interrupt occurs
while interrupts are disabled, this jump will not occur and instruction
execution will continue normally.<span style="mso-spacerun: yes">&nbsp;
</span>Later, when interrupts are once again enabled, the interrupt (which
remained pending the whole time) will occur and the jump to the handler code
will occur.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ CPU also contains page
table hardware and, at any moment, paging is either turned on or off.<span
style="mso-spacerun: yes">&nbsp; </span>The page table hardware is used to
implement virtual memory in the kernel, but for all code discussed here, paging
is always turned off.<span style="mso-spacerun: yes">&nbsp; </span>When paging
is turned on, we can make a distinction between virtual addresses and physical
addresses.<span style="mso-spacerun: yes">&nbsp; </span>We must also
distinguish between virtual address spaces and the installed memory physically
present on the machine.<span style="mso-spacerun: yes">&nbsp; </span>Since
paging will always be off in the code discussed here, all addresses will refer
in a simple and straightforward way to the bytes of memory.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The CPU contains a special
register, called the <i style='mso-bidi-font-style:normal'>Status Register</i>,
which contains three bits telling (1) whether the CPU is in System Mode or User
Mode, (2) whether interrupts are enabled or disabled, and (3) whether paging is
off or on.<span style="mso-spacerun: yes">&nbsp; </span>The Status Register
also contains three other bits telling the result of previous comparison
instructions.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The entire state of the CPU consists
of:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>15 general purpose (integer) registers
&#8211; System Registers<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>15 general purpose (integer) registers
&#8211; User Registers<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>16 floating point registers<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Status Register<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Program Counter (PC)<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Page Table Registers<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When we change from one thread to
another, we’ll need to save the state of the previous thread and re-load the
CPU with the saved state of the next thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In this code, we will ignore the
floating point registers entirely.<span style="mso-spacerun: yes">&nbsp;
</span>In other words, we will not save the floating point registers when we
switch from thread to thread.<span style="mso-spacerun: yes">&nbsp;
</span>Therefore, any threads that use the <u><span style='font-family:Courier'>double</span></u>
type will not function correctly.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Also, since paging is always
turned off, we can ignore the Page Table Registers.<span style="mso-spacerun:
yes">&nbsp; </span>There are two registers (called <b style='mso-bidi-font-weight:
normal'>PTBR</b> and <b style='mso-bidi-font-weight:normal'>PTLR</b>) but we
will not bother to save them whenever we switch from thread to thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ CPU contains two copies
of the general purpose integer registers.<span style="mso-spacerun: yes">&nbsp;
</span>One copy is used when the CPU is running in System Mode and one copy is
used when the CPU is in User Mode.<span style="mso-spacerun: yes">&nbsp;
</span>Since all the code discussed here runs in System Mode, we will ignore
the User Registers.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Therefore, whenever we switch
from one thread to another we’ll need to save and restore:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>15 general purpose (integer) registers
&#8211; System Registers<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Status Register<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><b
style='mso-bidi-font-weight:normal'>Program Counter (PC)<o:p></o:p></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify;mso-pagination:widow-orphan lines-together'><b
style='mso-bidi-font-weight:normal'><u><span style='font-size:20.0pt;
mso-bidi-font-size:10.0pt'>Context Switching<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify;mso-pagination:widow-orphan lines-together'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify;mso-pagination:widow-orphan lines-together'>Next,
let’s look at what happens when a timer interrupt occurs.</p>

<p class=MsoNormal style='text-align:justify;mso-pagination:widow-orphan lines-together'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify;mso-pagination:widow-orphan lines-together'>For
clarity, let’s call the currently running thread the “previous” thread.<span
style="mso-spacerun: yes">&nbsp; </span>The timer interrupt will cause a switch
to a new thread, which we will call the “next” thread.<span
style="mso-spacerun: yes">&nbsp; </span>The previous thread will be changed to
status <b style='mso-bidi-font-weight:normal'>READY</b> and will be placed at
the tail of the ready list.<span style="mso-spacerun: yes">&nbsp; </span>The
thread at the front of the ready list&#8212;the next thread&#8212;will be
removed from the ready list and will becoming the <b style='mso-bidi-font-weight:
normal'>RUNNING</b> thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Assume that interrupts are
enabled and a timer interrupt occurs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Whenever an interrupt of any kind
occurs, the CPU will complete the current instruction and will then push three
words onto the stack.<span style="mso-spacerun: yes">&nbsp; </span>Next, the
Status Register will be changed to disable interrupts.<span
style="mso-spacerun: yes">&nbsp; </span>Also the mode will be changed to System
Mode and Paging will be disabled, but these two changes have no effect since
the CPU was already in System Mode with Paging disabled.<span
style="mso-spacerun: yes">&nbsp; </span>Disabling interrupts means that the
processing to be described next will be able to run to completion without a
second interrupt occurring and messing things up before it is ready for them. </p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>After the Status Register bits
are modified, the CPU will force a branch to a specific address in low memory,
by loading the program counter (PC) with a fixed number that depends on the
type of interrupt.<span style="mso-spacerun: yes">&nbsp; </span>For a timer
interrupt, this address happens to be <span style='font-family:Courier'>0x00000004</span>.<span
style="mso-spacerun: yes">&nbsp; </span>Since there are 14 types of interrupts,
the first 14 words&#8212;called the <i style='mso-bidi-font-style:normal'>interrupt
vector</i>&#8212;are reserved for this purpose.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The three words pushed onto the
stack are (1) a word of all zeros, (2) the current status register, and (3) the
program counter.<span style="mso-spacerun: yes">&nbsp; </span>For some other
interrupt types, the first word will contain relevant information instead of
all zeros.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The scheduler includes some
assembly code, which is located in the file named <b style='mso-bidi-font-weight:
normal'>Runtime.s</b>.<span style="mso-spacerun: yes">&nbsp; </span>In
particular, this assembly file places 14 jump instructions in the interrupt
vector in low memory.<span style="mso-spacerun: yes">&nbsp; </span>For example,
at address <span style='font-family:Courier'>0x00000004</span> there is a jump
to the first instruction of an assembly routine called <b style='mso-bidi-font-weight:
normal'>TimerInterruptHandler</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the code for <b
style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-top-alt:solid windowtext 2.25pt;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><span style='font-family:
Courier'>TimerInterruptHandler:<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r1<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
Save all int registers on the <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r2<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<span style="mso-spacerun: yes">&nbsp; </span>interrupted thread's system
stack<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r3<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r4<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r5<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r6<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r7<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r8<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r9<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r10<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r11<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r12<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>_P_Thread_TimerInterruptHandler<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! Perform up-call<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r12<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! Restore int registers<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r11<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r10<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r9<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r8<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r7<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r6<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r5<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r4<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r3<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r2<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>r1<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:58.5pt 1.5in 184.5pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>reti<span
style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
Return from interrupt<o:p></o:p></span></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This code starts by saving
registers <b style='mso-bidi-font-weight:normal'>r1</b> through <b
style='mso-bidi-font-weight:normal'>r12</b> by pushing them onto the
stack.<span style="mso-spacerun: yes">&nbsp; </span>(Recall that register <b
style='mso-bidi-font-weight:normal'>r15</b> points to the stack top.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Register <b style='mso-bidi-font-weight:
normal'>r13</b> is used by all KPL programs and will contain the line number of
the statement being executed.<span style="mso-spacerun: yes">&nbsp; </span>This
number is used solely to be included in error messages. Register <b
style='mso-bidi-font-weight:normal'>r14</b> contains a pointer to the current
stack frame, which contains the local variables of a KPL routine.<span
style="mso-spacerun: yes">&nbsp; </span>Both registers <b style='mso-bidi-font-weight:
normal'>r13</b> and <b style='mso-bidi-font-weight:normal'>r14</b> will be
saved whenever we enter another KPL routine and will be restored before we
return, so it is not necessary to push them here; they’ll be saved as the first
actions of the routine called next.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>After saving the registers, this
routine calls a KPL routine called <b style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>.<span
style="mso-spacerun: yes">&nbsp; </span>(Note that the assembler routine and
the KPL routine happen to have the same name, which is certainly a poor
choice.<span style="mso-spacerun: yes">&nbsp; </span>Oh well…)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The KPL compiler adds a prefix to
the name of each routine to avoid naming clashes and to make the KPL namespace
and scoping conventions work.<span style="mso-spacerun: yes">&nbsp; </span>The
name given to the KPL function <b style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>
in the compiler output is <b style='mso-bidi-font-weight:normal'>_P_Thread_TimerInterruptHandler</b>,
which is what must be used in the above assembly code.<span
style="mso-spacerun: yes">&nbsp; </span>[The compiler always prepends “<b
style='mso-bidi-font-weight:normal'>_P_</b><i style='mso-bidi-font-style:normal'>xxxxx</i><b
style='mso-bidi-font-weight:normal'>_</b>”, where <i style='mso-bidi-font-style:
normal'>xxxxx</i> is the name of the package containing the routine.]</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the KPL routine named <b
style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
TimerInterruptHandler ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>currentInterruptStatus = DISABLED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>currentThread.Yield ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>currentInterruptStatus = ENABLED<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The variable <b style='mso-bidi-font-weight:
normal'>currentInterruptStatus</b> can take either of two values, <b
style='mso-bidi-font-weight:normal'>DISABLED</b> or <b style='mso-bidi-font-weight:
normal'>ENABLED</b>.<span style="mso-spacerun: yes">&nbsp; </span>The idea is
that the value of this variable will always mirror the status of the
interrupt-enabled bit in the CPU, since it is difficult to query this bit
directly.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Since the interrupt-enabled bit
was changed from enabled to disabled by the CPU as part of the interrupt
processing sequence, this statement is necessary to ensure that the variable <b
style='mso-bidi-font-weight:normal'>currentInterruptStatus</b> has a correct
up-to-date value.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next statement invokes the <b
style='mso-bidi-font-weight:normal'>Yield</b> method.<span style="mso-spacerun:
yes">&nbsp; </span>Notice that if the call to <b style='mso-bidi-font-weight:
normal'>Yield</b> were to be ignored and execution were to continue, the
process described so far would be reversed; the registers would be restored
and, at the end of the assembly language routine, a <span style='font-family:
Courier'>reti</span> machine instruction would be executed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <span style='font-family:
Courier'>reti</span> instruction pops three words off the stack.<span
style="mso-spacerun: yes">&nbsp; </span>(Recall that during interrupt
processing, three words were pushed.)<span style="mso-spacerun: yes">&nbsp;
</span>The <span style='font-family:Courier'>reti</span> will discard the zero
word, and it will restore the Status Register and the Program Counter.<span
style="mso-spacerun: yes">&nbsp; </span>At this point, the entire state of the
interrupted thread will be restored and instruction execution will resume with
the next instruction from the interrupted code sequence.<span
style="mso-spacerun: yes">&nbsp; </span>The interrupted thread will be
none-the-wiser and will behave exactly the same as if no interrupt had
occurred.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>But the call to <b
style='mso-bidi-font-weight:normal'>Yield</b> cannot be ignored.<span
style="mso-spacerun: yes">&nbsp; </span>Here is the <b style='mso-bidi-font-weight:
normal'>Yield</b> method in class <b style='mso-bidi-font-weight:normal'>Thread</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>method</span></u><span style='font-family:Courier'>
Yield ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>nextTh: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat, junk: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>oldIntStat = SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>nextTh = readyList.Remove ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>if</u> nextTh<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>status = READY<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>readyList.AddToEnd (self)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Run (nextTh)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>junk = SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endMethod<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>(In the code fragments given in
this document, some simplifications have been made.<span style="mso-spacerun:
yes">&nbsp; </span>For example, there are a number of self-check tests that
have been removed.<span style="mso-spacerun: yes">&nbsp; </span>Also, the
comments have been reduced or eliminated.<span style="mso-spacerun: yes">&nbsp;
</span>Nevertheless, the core functionality is unchanged.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This method includes three local
variables, named <b style='mso-bidi-font-weight:normal'>nextTh</b>, <b
style='mso-bidi-font-weight:normal'>oldIntStat</b>, and <b style='mso-bidi-font-weight:
normal'>junk</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the KPL language, within a
method, the <u><span style='font-family:Courier'>self</span></u> keyword refers
to the receiving object,<span style="mso-spacerun: yes">&nbsp; </span>just like
<u><span style='font-family:Courier'>this</span></u> in Java or C++.<span
style="mso-spacerun: yes">&nbsp; </span>Since this method was invoked on the <b
style='mso-bidi-font-weight:normal'>currentThread</b>, <u><span
style='font-family:Courier'>self</span></u> points to the <b style='mso-bidi-font-weight:
normal'>Thread</b> object representing the thread being interrupted.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The first action in this method
is to disable interrupts, which in this case, happen to already be
disabled.<span style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>SetInterruptsTo</b> function will change the interrupt status to
whatever it is passed&#8212;<b style='mso-bidi-font-weight:normal'>DISABLED</b>
in this case&#8212;and will return the previous value of <b style='mso-bidi-font-weight:
normal'>currentInterruptStatus</b>.<span style="mso-spacerun: yes">&nbsp;
</span>This call is necessary, since the <b style='mso-bidi-font-weight:normal'>Yield</b>
method may also be called in other circumstances in which interrupts are
enabled.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Note that we see this pattern in
several places:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>oldIntStat = SetInterruptsTo (DISABLE)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>... </span><i style='mso-bidi-font-style:normal'>some
critical region of code</i><span style='font-family:Courier'> ...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>junk = SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The idea is to disable interrupts
while we do something that should not be interrupted and then to restore
interrupts to whatever they were previously.<span style="mso-spacerun:
yes">&nbsp; </span>(The variable <b style='mso-bidi-font-weight:normal'>junk</b>
is needed because KPL does not allow a returned value to be ignored.<span
style="mso-spacerun: yes">&nbsp; </span>The variable is named <b
style='mso-bidi-font-weight:normal'>junk</b> because we don’t need the value.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next action is to remove a
thread from the front of the ready list.<span style="mso-spacerun: yes">&nbsp;
</span>The goal is to switch to this thread.<span style="mso-spacerun:
yes">&nbsp; </span>The variable <b style='mso-bidi-font-weight:normal'>nextTh</b>
is set to point to this <b style='mso-bidi-font-weight:normal'>Thread</b>
object.<span style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>Remove</b> function will return null if the ready list was empty, so
the next test is to see whether there is a “next” thread to switch to.<span
style="mso-spacerun: yes">&nbsp; </span>If not, the <b style='mso-bidi-font-weight:
normal'>Yield</b> method will return and, subsequently, we’ll make a return
back to the thread that was interrupted.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>If there truly is a “next”
thread, we change the <b style='mso-bidi-font-weight:normal'>status</b> of the
receiver object (the current thread) to <b style='mso-bidi-font-weight:normal'>READY</b>
and place it at the end of the ready list.<span style="mso-spacerun:
yes">&nbsp; </span>Then we call the <b style='mso-bidi-font-weight:normal'>Run</b>
function, which is shown next.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
Run (nextThread: <u>ptr</u> <u>to</u> <u>Thread</u>)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>prevThread, th: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>prevThread = currentThread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>prevThread.CheckOverflow ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>currentThread = nextThread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>nextThread.status = RUNNING<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>Switch (prevThread, nextThread)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>while</u> !
threadsToBeDestroyed.IsEmpty ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>th =
threadsToBeDestroyed.Remove()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>th.status = UNUSED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endWhile<o:p></o:p></u></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Each thread has a fixed sized
stack which we hope is large enough.<span style="mso-spacerun: yes">&nbsp;
</span>If a thread recurses deeply, it may use up a lot of stack space.<span
style="mso-spacerun: yes">&nbsp; </span>The call to <b style='mso-bidi-font-weight:
normal'>CheckOverflow</b> is an attempt to catch situations when the previously
executing thread has overflowed its stack.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Recall that each <b
style='mso-bidi-font-weight:normal'>Thread</b> object contains an array of 1000
words, which is used for its stack.<span style="mso-spacerun: yes">&nbsp;
</span>In other words, register <b style='mso-bidi-font-weight:normal'>r15</b>
will be pointing somewhere in this array and, as things are pushed onto the
thread’s stack, they will go into memory locations which lie somewhere in this
array.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When the <b style='mso-bidi-font-weight:
normal'>systemStack</b> array is first initialized, we store a special word in
location 0, at the very bottom of the stack.<span style="mso-spacerun:
yes">&nbsp; </span>This value is called a <i style='mso-bidi-font-style:normal'>sentinel</i>.<span
style="mso-spacerun: yes">&nbsp; </span>If the stack grows too much, that location
will be overwritten.<span style="mso-spacerun: yes">&nbsp; </span><b
style='mso-bidi-font-weight:normal'>CheckOverflow</b> will check to see if the
sentinel value is still unchanged.<span style="mso-spacerun: yes">&nbsp;
</span>This would signal a catastrophic failure since arbitrary locations may
have been overwritten.<span style="mso-spacerun: yes">&nbsp; </span>Although KPL
checks array accesses, the <b style='mso-bidi-font-weight:normal'>systemStack</b>
simply provides an area for the stack, which is accessed via <b
style='mso-bidi-font-weight:normal'>r15</b> by machine instructions like <span
style='font-family:Courier'>call</span> and <span style='font-family:Courier'>ret</span>,
which do not check for overflow.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The next action in <b
style='mso-bidi-font-weight:normal'>Run</b> is to update <b style='mso-bidi-font-weight:
normal'>currentThread</b> to point to the next thread and to change its status
from <b style='mso-bidi-font-weight:normal'>READY</b> to <b style='mso-bidi-font-weight:
normal'>RUNNING</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Then we see a call to an assembly
routine called <b style='mso-bidi-font-weight:normal'>Switch</b>, which is from
the file <b style='mso-bidi-font-weight:normal'>Switch.s</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-top-alt:solid windowtext 2.25pt;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><span style='font-family:
Courier'>Switch:<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r15+4],r1<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! Move the prevThread
into r1<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>r1,16,r1<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! Make r1
point to r1.regs<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r2,[r1+0]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! Save r2..r14 in r1.regs<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r3,[r1+4]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r4,[r1+8]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r5,[r1+12]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r6,[r1+16]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r7,[r1+20]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r8,[r1+24]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r9,[r1+28]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r10,[r1+32]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r11,[r1+36]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r12,[r1+40]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r13,[r1+44]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r14,[r1+48]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>store<span
style='mso-tab-count:1'>&nbsp;&nbsp; </span>r15,[r1+52]<span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp; </span>! Save r15 in r1.stackTop<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r15+8],r1<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! Move the nextThread
into r1<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>r1,16,r1<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! Make r1
point to r1.regs<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+0],r2<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! Restore r2..r14
from r1.regs<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+4],r3<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+8],r4<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+12],r5<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+16],r6<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+20],r7<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+24],r8<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+28],r9<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+32],r10<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+36],r11<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+40],r12<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+44],r13<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+48],r14<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>load<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>[r1+52],r15<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! Restore r15 from
r1.stackTop<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:76.5pt 135.0pt 243.0pt;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<o:p></o:p></span></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'>Switch</b> is passed two arguments, pointers to the previous and next <b
style='mso-bidi-font-weight:normal'>Thread</b> objects, which were called <b
style='mso-bidi-font-weight:normal'>prevThread</b> and <b style='mso-bidi-font-weight:
normal'>nextThread</b> in the calling routine.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>To access arguments passed to an
assembly routine, the programmer needs to know how KPL routines pass arguments,
i.e., the <i style='mso-bidi-font-style:normal'>calling conventions</i> of the
language’s implementation.<span style="mso-spacerun: yes">&nbsp; </span>The KPL
compiler generates code to pass arguments on the stack and, to access these
arguments, the programmer needs to know exactly where, relative to the stack
top <b style='mso-bidi-font-weight:normal'>r15</b> these arguments will be
placed.<span style="mso-spacerun: yes">&nbsp; </span>Fortunately, students
using the BLITZ system will only need to read (never to write) assembly code
like this.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The first <span style='font-family:
Courier'>load</span> instruction copies the <b style='mso-bidi-font-weight:
normal'>prevThread</b> pointer argument from the stack into a register.<span
style="mso-spacerun: yes">&nbsp; </span>The <span style='font-family:Courier'>add</span>
instruction changes to <b style='mso-bidi-font-weight:normal'>r1</b> to point
to the first element in the <b style='mso-bidi-font-weight:normal'>regs</b>
array in that <b style='mso-bidi-font-weight:normal'>Thread</b> object.<span
style="mso-spacerun: yes">&nbsp; </span>This routine uses explicit knowledge
about how KPL will lay out the fields of an object.<span style="mso-spacerun:
yes">&nbsp; </span>If a field is added to or removed from the <b
style='mso-bidi-font-weight:normal'>Thread</b> class, then <b style='mso-bidi-font-weight:
normal'>reg[0]</b> will no longer be located at offset 16 in the object and
this routine will break.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, <b style='mso-bidi-font-weight:
normal'>Switch</b> stores the contents of all registers into the <b
style='mso-bidi-font-weight:normal'>prevThread</b> object using 14 <span
style='font-family:Courier'>store</span> instructions.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, <b style='mso-bidi-font-weight:
normal'>Switch</b> gets a pointer to the <b style='mso-bidi-font-weight:normal'>nextThread</b>
object.<span style="mso-spacerun: yes">&nbsp; </span>In very similar code, it
copies the saved register values from this object into the registers.<span
style="mso-spacerun: yes">&nbsp; </span>Notice that this includes <b
style='mso-bidi-font-weight:normal'>r15</b>, the stack top, itself!<span
style="mso-spacerun: yes">&nbsp; </span>Therefore, after the last <span
style='font-family:Courier'>load</span> instruction is executed, all pushes and
pops will now go to or from the next thread’s stack.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Note that everything involving
the stack so far, including the initial state saving of the interrupted thread,
was done on the system stack of the “previous” thread.<span
style="mso-spacerun: yes">&nbsp; </span>From here on, we have switched to a new
stack.<span style="mso-spacerun: yes">&nbsp; </span>At the moment the stack
pointer <b style='mso-bidi-font-weight:normal'>r15</b> is loaded, we might say
that we have officially switched from the “previous” thread to the “next”
thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Finally, <b style='mso-bidi-font-weight:
normal'>Switch</b> executes a return statement.<span style="mso-spacerun:
yes">&nbsp; </span>But notice that, since <b style='mso-bidi-font-weight:normal'>r15</b>
has been changed, this is not returning to the invocation of <b
style='mso-bidi-font-weight:normal'>Run</b> that called <b style='mso-bidi-font-weight:
normal'>Switch</b>!</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>If you search through all the code
of the scheduler, you’ll see that the routine <b style='mso-bidi-font-weight:
normal'>Switch</b> is only called from one place: the <b style='mso-bidi-font-weight:
normal'>Run</b> routine.<span style="mso-spacerun: yes">&nbsp; </span>However, <b
style='mso-bidi-font-weight:normal'>Switch</b> will be called many times from
many different invocations of <b style='mso-bidi-font-weight:normal'>Run</b>.<span
style="mso-spacerun: yes">&nbsp; </span>At this point in execution, this
invocation of <b style='mso-bidi-font-weight:normal'>Switch</b> return to a <i
style='mso-bidi-font-style:normal'>different invocation</i> of <b
style='mso-bidi-font-weight:normal'>Run</b> than the invocation that called it!</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In all “normal” programs, every
routine always returns to the routine that called it.<span style="mso-spacerun:
yes">&nbsp; </span>But what you’re seeing here is something that is very
unusual and may take some thinking about.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Notice that we have saved the
entire state of the previous thread.<span style="mso-spacerun: yes">&nbsp;
</span>The Program Counter and Status Register were saved on that thread’s
stack as part of the interrupt processing.<span style="mso-spacerun:
yes">&nbsp; </span>Then we pushed registers <b style='mso-bidi-font-weight:
normal'>r1</b> through <b style='mso-bidi-font-weight:normal'>r12</b> onto its
stack.<span style="mso-spacerun: yes">&nbsp; </span>Then, we entered some KPL
routines (<b style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>, <b
style='mso-bidi-font-weight:normal'>Yield</b>, and <b style='mso-bidi-font-weight:
normal'>Run</b>) which saved <b style='mso-bidi-font-weight:normal'>r13</b>, <b
style='mso-bidi-font-weight:normal'>r14</b>, and <b style='mso-bidi-font-weight:
normal'>r15</b> as part of the KPL calling sequence.<span style="mso-spacerun:
yes">&nbsp; </span>Then, in <b style='mso-bidi-font-weight:normal'>Switch</b>,
we again saved all registers (except <b style='mso-bidi-font-weight:normal'>r1</b>).<span
style="mso-spacerun: yes">&nbsp; </span>(Register <b style='mso-bidi-font-weight:
normal'>r1</b> is a “work register” and all KPL routines assume that every
routine will trash it.<span style="mso-spacerun: yes">&nbsp; </span>In
particular, there is no need to save <b style='mso-bidi-font-weight:normal'>r1</b>
since <b style='mso-bidi-font-weight:normal'>Run</b>, which called <b
style='mso-bidi-font-weight:normal'>Switch</b>, will assume that <b
style='mso-bidi-font-weight:normal'>r1</b> has been trashed.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The variable <b style='mso-bidi-font-weight:
normal'>currentThread</b> has been updated to point to some new <b
style='mso-bidi-font-weight:normal'>Thread</b> object, which has been removed
from the ready list and had its status changed to <b style='mso-bidi-font-weight:
normal'>RUNNING</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>So assume that the “next” thread,
which is now about to start running, was suspended at some earlier time in the
very same way as the “previous” thread was suspended just now.<span
style="mso-spacerun: yes">&nbsp; </span>In other words, assume that some earlier
timer interrupt caused the exact same sequence of actions to occur for the
“next” thread that we’ve just described for the “previous” thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>So now, with the “next” thread’s
registers restored, we will work back and finish executing the routines we’ve
just discussed until the <span style='font-family:Courier'>reti</span>
instruction is executed.<span style="mso-spacerun: yes">&nbsp; </span>The state
of the CPU will be restored to what it was just before some earlier interrupt
occurred, and at that point the interrupted instruction sequence in the “next”
thread will be returned to.<span style="mso-spacerun: yes">&nbsp; </span>We will
resume executing the code in some thread that was interrupted long ago.<span
style="mso-spacerun: yes">&nbsp; </span>Many threads may have had a chance to
run since then and there may have been many timer interrupts and thread
switches since then, but it is finally time to return to this particular thread
and give it another time-slice of execution.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In other words, the next few
actions will be to complete the routines that have been called and to return
from each, in turn, unwinding the calling stack.<span style="mso-spacerun:
yes">&nbsp; </span>Although this is now occurring in a new and different thread
with a different stack, it may be easier for you to imagine that we are still
in the same with the same stack, i.e., that the “previous” thread and the
“next” thread are the same.<span style="mso-spacerun: yes">&nbsp; </span>It
doesn’t really matter, since the actions are the same in either case.<span
style="mso-spacerun: yes">&nbsp; </span>Whenever a thread is interrupted, the
exact same sequence of events occurs and its state is pushed onto its stack in
the exact same way.<span style="mso-spacerun: yes">&nbsp; </span>The only difference
is that we are returning from invocations that were suspended a long time ago,
not from the invocations that were just entered.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>After <b style='mso-bidi-font-weight:
normal'>Switch</b> returns, we’re back in <b style='mso-bidi-font-weight:normal'>Run</b>.<span
style="mso-spacerun: yes">&nbsp; </span>After doing something with <b
style='mso-bidi-font-weight:normal'>threadsToBeDestroyed</b>, which we’ll
discuss in a second, we return to <b style='mso-bidi-font-weight:normal'>Yield</b>.<span
style="mso-spacerun: yes">&nbsp; </span>The routine <b style='mso-bidi-font-weight:
normal'>Yield</b> will restore interrupts to what they were when <b
style='mso-bidi-font-weight:normal'>Yield</b> was first entered.<span
style="mso-spacerun: yes">&nbsp; </span>(Recall that whenever <b
style='mso-bidi-font-weight:normal'>Yield</b> is called from <b
style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>, it starts by
disabling interrupts which were already disabled, i.e., doing nothing, so the
action of restoring the <i style='mso-bidi-font-style:normal'>interrupt-enabled</i>
bit to its previous status also has no effect.<span style="mso-spacerun:
yes">&nbsp; </span>This code is here since <b style='mso-bidi-font-weight:normal'>Yield</b>
can be called from other places, when interrupts may in fact be enabled.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Then <b style='mso-bidi-font-weight:
normal'>Yield</b> returns to the KPL routine <b style='mso-bidi-font-weight:
normal'>TimerInterruptHandler</b>, which will then set the variable <b
style='mso-bidi-font-weight:normal'>currentInterruptStatus</b> to <b
style='mso-bidi-font-weight:normal'>ENABLED</b>.<span style="mso-spacerun:
yes">&nbsp; </span>This is appropriate, because interrupts will become enabled
within the next few instructions.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Then the KPL routine <b
style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b> returns to the
assembly routine <b style='mso-bidi-font-weight:normal'>TimerInterruptHandler</b>,
which will restore the interrupted code’s registers and execute the <span
style='font-family:Courier'>RETI</span> (return-from-interrupt) instruction.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <span style='font-family:
Courier'>RETI</span> instruction will restore the Status Register, thereby
re-enabling interrupts, and restore the Program Counter, which will cause a
return to the instruction stream that was interrupted.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Now take a look at the code in <b
style='mso-bidi-font-weight:normal'>Run</b> just after the call to <b
style='mso-bidi-font-weight:normal'>Switch</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here, we see that a list called <b
style='mso-bidi-font-weight:normal'>threadsToBeDestroyed</b> is checked.<span
style="mso-spacerun: yes">&nbsp; </span>This is a list of <b style='mso-bidi-font-weight:
normal'>Thread</b> objects which is almost always empty.<span
style="mso-spacerun: yes">&nbsp; </span>However, in the case that a thread
wishes to terminate itself, it will add its own <b style='mso-bidi-font-weight:
normal'>Thread</b> object to that list before calling <b style='mso-bidi-font-weight:
normal'>Run</b>.<span style="mso-spacerun: yes">&nbsp; </span>This check in <b
style='mso-bidi-font-weight:normal'>Run</b> will be executed as the first thing
any “next” thread does.<span style="mso-spacerun: yes">&nbsp; </span>It
performs any final cleanup required on the <b style='mso-bidi-font-weight:normal'>Thread</b>
object that can only be done after the thread has really finished.<span
style="mso-spacerun: yes">&nbsp; </span>Here all we do is change the status to <b
style='mso-bidi-font-weight:normal'>UNUSED</b>, but in a complete kernel in
which the <b style='mso-bidi-font-weight:normal'>Thread</b> objects are
recycled, this is the point where you would need to add this <b
style='mso-bidi-font-weight:normal'>Thread</b> object back to the free
pool.<span style="mso-spacerun: yes">&nbsp; </span>Actions like this must be
done by some other thread, and the obvious candidate to do the work is the very
next thread that runs.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Creating a
New Thread<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>To create a new thread, you must
have a <b style='mso-bidi-font-weight:normal'>Thread</b> object to work
with.<span style="mso-spacerun: yes">&nbsp; </span>You’ll need to initialize
the object and then invoke the <b style='mso-bidi-font-weight:normal'>Fork</b>
method to add it to the ready list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>var<o:p></o:p></span></u></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>aThread: Thread = <u>new</u> Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'>aThread.Init
(&quot;My Example&quot;)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span
style='font-family:Courier'>aThread.Fork (Foo, 123)<u><o:p></o:p></u></span></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Init</b> method is not too interesting.<span style="mso-spacerun:
yes">&nbsp; </span>It simply fills in the fields in the <b style='mso-bidi-font-weight:
normal'>Thread</b> object.<span style="mso-spacerun: yes">&nbsp; </span>It
fills in the <b style='mso-bidi-font-weight:normal'>name</b> field from the
argument.<span style="mso-spacerun: yes">&nbsp; </span>It sets <b
style='mso-bidi-font-weight:normal'>status</b> to <b style='mso-bidi-font-weight:
normal'>JUST_CREATED</b>.<span style="mso-spacerun: yes">&nbsp; </span>It
initializes the <b style='mso-bidi-font-weight:normal'>systemStack</b> array
and writes the sentinel value (used to watch for stack overflow) into the
array.<span style="mso-spacerun: yes">&nbsp; </span>Finally, it initializes the
<b style='mso-bidi-font-weight:normal'>regs</b> array and returns.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Fork</b> method is more complex.<span style="mso-spacerun: yes">&nbsp;
</span>It is passed a pointer to a function&#8212;<b style='mso-bidi-font-weight:
normal'>Foo</b> in this case&#8212;and an integer.<span style="mso-spacerun:
yes">&nbsp; </span>This is the function that will be executed by the new
thread.<span style="mso-spacerun: yes">&nbsp; </span>In some sense, this is the
“main” function of the new thread.<span style="mso-spacerun: yes">&nbsp;
</span><b style='mso-bidi-font-weight:normal'>Foo</b> is a made-up name.<span
style="mso-spacerun: yes">&nbsp; </span>In an actual program, the programmer
will probably give it a more descriptive name.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This function must take a single
integer as an argument and the value provided to <b style='mso-bidi-font-weight:
normal'>Fork</b> will be passed to this function.<span style="mso-spacerun:
yes">&nbsp; </span>The idea is that many threads may be executing the same code
and the integer argument allows each thread to differentiate itself from other
threads executing the same code.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
Foo (arg: <u>int</u>)<u><o:p></o:p></u></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'>...</span><i
style='mso-bidi-font-style:normal'>do some stuff</i><span style='font-family:
Courier'>...<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>If the thread function ever
returns, the thread will terminate.<span style="mso-spacerun: yes">&nbsp;
</span>However, <b style='mso-bidi-font-weight:normal'>Foo</b> might
legitimately consist of an infinite loop and the thread may never terminate.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the code for <b
style='mso-bidi-font-weight:normal'>Fork</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>method</span></u><span style='font-family:Courier'>
Fork (fun: <u>ptr</u> <u>to</u> <u>function</u> (<u>int</u>), arg: <u>int</u>)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat, junk: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>oldIntStat = SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>initialFunction = fun<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>initialArgument = arg<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>stackTop = stackTop - 4<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>*(stackTop <u>asPtrTo</u> <u>int</u>) =
ThreadStartUp <u>asInteger</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>status = READY<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>readyList.AddToEnd (self)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>junk = SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endMethod<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>First, interrupts are disabled,
if they are not already disabled, since we will be updating the ready
list.<span style="mso-spacerun: yes">&nbsp; </span>The ready list is shared by
all threads and a timer interrupt during <b style='mso-bidi-font-weight:normal'>Fork</b>
might allow some other thread to access the ready list while we are in the
middle of updating it, leading to catastrophe.<span style="mso-spacerun:
yes">&nbsp; </span>After updating the ready list, interrupts are restored to
whatever they were when <b style='mso-bidi-font-weight:normal'>Fork</b> was
entered, and <b style='mso-bidi-font-weight:normal'>Fork</b> returns.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>When the new thread reaches the
front of the ready list at some later time and finally gets a chance to run, it
will be started up by the code we looked at earlier in <b style='mso-bidi-font-weight:
normal'>Switch</b>.<span style="mso-spacerun: yes">&nbsp; </span>Recall that <b
style='mso-bidi-font-weight:normal'>Switch</b> will restore the registers and
blindly execute a return statement. <span style="mso-spacerun:
yes">&nbsp;</span><b style='mso-bidi-font-weight:normal'>Switch</b> executes
the same instructions, regardless of whether the thread was previously
interrupted or is a brand new thread, so we need to set things up here in <b
style='mso-bidi-font-weight:normal'>Fork</b> so that the <span
style='font-family:Courier'>RET</span> instruction in <b style='mso-bidi-font-weight:
normal'>Switch</b> will branch to the starting code of this thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In other words, the new thread
will be started up in exactly the same way (namely by the code in <b
style='mso-bidi-font-weight:normal'>Switch</b>) that resumes threads that
already underway but which were suspended by timer interrupts and calls to <b
style='mso-bidi-font-weight:normal'>Yield</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, look at the way <b
style='mso-bidi-font-weight:normal'>Fork</b> manipulates <b style='mso-bidi-font-weight:
normal'>stackTop</b>.<span style="mso-spacerun: yes">&nbsp; </span>First, <b
style='mso-bidi-font-weight:normal'>stackTop</b> is decremented and then
something is stored at the top of the stack.<span style="mso-spacerun:
yes">&nbsp; </span>So, <b style='mso-bidi-font-weight:normal'>Fork</b> is
simply pushing something onto the new thread’s stack.<span style="mso-spacerun:
yes">&nbsp; </span>And the thing that <b style='mso-bidi-font-weight:normal'>Fork</b>
is pushing is the address of a routine called <b style='mso-bidi-font-weight:
normal'>ThreadStartUp</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In KPL, the name of a function
can be used as the address of that function.<span style="mso-spacerun:
yes">&nbsp; </span>The expression</p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>ThreadStartUp <u>asInteger</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>converts this from a pointer to a
function to an integer so that it can be stored in the stack, which is an array
on integers.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'>ThreadStartUp</b> is an assembly routine located in the file <b
style='mso-bidi-font-weight:normal'>Switch.s</b>.<span style="mso-spacerun:
yes">&nbsp; </span>At some point in the future, when <b style='mso-bidi-font-weight:
normal'>Switch</b> is called and the thread is finally allowed to begin
execution, what will happen?</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>First, <b style='mso-bidi-font-weight:
normal'>Switch</b> will “restore” the thread’s registers.<span
style="mso-spacerun: yes">&nbsp; </span>Since the register array <b
style='mso-bidi-font-weight:normal'>regs</b> has been initialized to zeros, the
registers will be “restored” to zero.<span style="mso-spacerun: yes">&nbsp;
</span>Then <b style='mso-bidi-font-weight:normal'>Switch</b> will “return” to
the code that was executing.<span style="mso-spacerun: yes">&nbsp; </span>To do
this, <b style='mso-bidi-font-weight:normal'>Switch</b> ends with a <span
style='font-family:Courier'>RET</span> instruction, which pops a return address
off the stack and branches to it.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Since <b style='mso-bidi-font-weight:
normal'>Fork</b> has pushed the starting address of the <b style='mso-bidi-font-weight:
normal'>ThreadStartUp</b> routine, <b style='mso-bidi-font-weight:normal'>Switch</b>
will effectively just jump to this routine.<span style="mso-spacerun:
yes">&nbsp; </span><b style='mso-bidi-font-weight:normal'>ThreadStartUp</b>
will take it from there, and we’ll look at that code soon.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Notice that the <span
style='font-family:Courier'>RET</span> instruction in <b style='mso-bidi-font-weight:
normal'>Switch</b> will cause a jump&#8212;not really a “call”&#8212;to the
routine named <b style='mso-bidi-font-weight:normal'>ThreadStartUp</b>.<span
style="mso-spacerun: yes">&nbsp; </span><b style='mso-bidi-font-weight:normal'>ThreadStartUp</b>
will never return.<span style="mso-spacerun: yes">&nbsp; </span>Isn’t this
interesting: a “return” instruction is executed to “call” a routine!</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Fork</b> function also stores into the fields <b style='mso-bidi-font-weight:
normal'>initialFunction</b> and <b style='mso-bidi-font-weight:normal'>initialArgument</b>,
the address of the thread’s “main” function and an argument to pass to it.<span
style="mso-spacerun: yes">&nbsp; </span>Later, we’ll see how this function gets
invoked.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Finally, <b style='mso-bidi-font-weight:
normal'>Fork</b> changes the thread’s status to <b style='mso-bidi-font-weight:
normal'>READY</b> and places it on the ready list.<span style="mso-spacerun:
yes">&nbsp; </span>After re-enabling interrupts, <b style='mso-bidi-font-weight:
normal'>Fork</b> will return and the current thread will continue executing.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At some time in the future, there
will be a timer interrupt and <b style='mso-bidi-font-weight:normal'>Switch</b>
will be invoked to switch to a new thread.<span style="mso-spacerun:
yes">&nbsp; </span>Other threads may be in front of the <b style='mso-bidi-font-weight:
normal'>readyList</b>, but eventually the newly created thread will come to the
front of the <b style='mso-bidi-font-weight:normal'>readyList</b>.<span
style="mso-spacerun: yes">&nbsp; </span>When this happens, <b style='mso-bidi-font-weight:
normal'>Switch</b> will act as we just described.<span style="mso-spacerun:
yes">&nbsp; </span>After setting the registers (to zero), <b style='mso-bidi-font-weight:
normal'>Switch</b> will “return” to the <b style='mso-bidi-font-weight:normal'>ThreadStartUp</b>
routine.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Thread
Start Up<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At some later time, a context
switch will occur and <b style='mso-bidi-font-weight:normal'>Switch</b> will be
invoked.<span style="mso-spacerun: yes">&nbsp; </span><b style='mso-bidi-font-weight:
normal'>Switch</b> will save the previous thread’s registers, load the
registers of this newly forked thread, and execute a return instruction which
will branch to the first instruction of the routine called <b style='mso-bidi-font-weight:
normal'>ThreadStartUp</b>.<span style="mso-spacerun: yes">&nbsp; </span><b
style='mso-bidi-font-weight:normal'>ThreadStartUp</b> is given next.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-top-alt:solid windowtext 2.25pt;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><span style='font-family:
Courier'>ThreadStartUp:<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r0,r14<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
Clear the FP register<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r0,r12<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
Clear the Catch Stack pointer<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>_P_Thread_ThreadStartMain<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>! Call ThreadStartMain<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'>ThreadHang:<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>debug<span
style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>!
Should never reach this point<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:1.0in 135.0pt 229.5pt 4.75in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ThreadHang<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>! .<o:p></o:p></span></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>All running KPL programs assume
that register <b style='mso-bidi-font-weight:normal'>r15</b> points to the top
of the stack.<span style="mso-spacerun: yes">&nbsp; </span>They also assume
that register <b style='mso-bidi-font-weight:normal'>r14</b> points to the
activation stack frame of the currently executing routine.<span
style="mso-spacerun: yes">&nbsp; </span>This register is also called the <i
style='mso-bidi-font-style:normal'>frame pointer</i> (FP).<span
style="mso-spacerun: yes">&nbsp; </span>Finally, register <b style='mso-bidi-font-weight:
normal'>r12</b> is assumed to point to the <i style='mso-bidi-font-style:normal'>catch
stack</i>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This routine begins by setting <b
style='mso-bidi-font-weight:normal'>r14</b> and <b style='mso-bidi-font-weight:
normal'>r12</b> to zero.<span style="mso-spacerun: yes">&nbsp; </span>(This is
redundant&#8212;perhaps unnecessarily cautious&#8212;since the method <b
style='mso-bidi-font-weight:normal'>Thread.Init</b> initialized the <b
style='mso-bidi-font-weight:normal'>regs</b> array to all zeros.)</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>[ The KPL language contains a <i
style='mso-bidi-font-style:normal'>try-throw-catch</i> mechanism, similar to
what’s in Java.<span style="mso-spacerun: yes">&nbsp; </span>The
try-throw-catch mechanism does not need to be used in any of the BLITZ code and
the mechanism can be ignored safely.<span style="mso-spacerun: yes">&nbsp;
</span>The catch stack is a linked list of &lt;<i style='mso-bidi-font-style:
normal'>error-id</i>, <i style='mso-bidi-font-style:normal'>catch-code-entry-point</i>&gt;
pairs that will used whenever an error is thrown.<span style="mso-spacerun:
yes">&nbsp; </span>Although the mechanism is not used, it’s a good idea to
initialize the stack properly.<span style="mso-spacerun: yes">&nbsp; </span>By
setting the catch stack to null, we set it up so that no <u><span
style='font-family:Courier'>try</span></u>/<u><span style='font-family:Courier'>catch</span></u>
statements are active in this thread.<span style="mso-spacerun: yes">&nbsp;
</span>If any error should be thrown with no <u><span style='font-family:Courier'>try</span></u>
statement to catch the error, the mechanism will work properly and an error
message will be issued. ]</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>By setting the current frame
pointer (i.e., <b style='mso-bidi-font-weight:normal'>r14</b>) to zero, we will
initialize the stack of activation frames properly.<span style="mso-spacerun:
yes">&nbsp; </span>As new routines are invoked, a linked list of activation
frames will be built.<span style="mso-spacerun: yes">&nbsp; </span>Starting
with FP equal to null is necessary so that this list is properly terminated.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next <b style='mso-bidi-font-weight:
normal'>ThreadStartUp</b> will call the KPL routine <b style='mso-bidi-font-weight:
normal'>ThreadStartMain</b>, which is shown next:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-top-alt:solid windowtext 2.25pt;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span style='font-family:
Courier'>function</span></u><span style='font-family:Courier'> ThreadStartMain
()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>junk: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mainFun: ptr
to function (int)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span>junk = SetInterruptsTo
(ENABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span>mainFun =
currentThread.initialFunction<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span>mainFun
(currentThread.initialArgument)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span>ThreadFinish ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><span style='font-family:
Courier'><span style="mso-spacerun: yes">&nbsp; </span>FatalError (&quot;ThreadFinish
should never return&quot;)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:81.0pt 153.0pt 3.25in;
border:none;mso-border-left-alt:solid windowtext 2.25pt;mso-border-bottom-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span style='font-family:
Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'>ThreadStart</b> calls <b style='mso-bidi-font-weight:normal'>SetInterruptsTo</b>
to enable interrupts (and set <b style='mso-bidi-font-weight:normal'>currentInterruptStatus</b>)
so that the new thread begins execution with interrupts enabled.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Recall that the <b
style='mso-bidi-font-weight:normal'>initialFunction</b> field of the thread object
contains a pointer to the thread’s “main” function.<span style="mso-spacerun:
yes">&nbsp; </span>The KPL language does not permit this function to be called
with the obvious syntax</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>currentThread.initialFunction (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>since that syntax is used for
method invocation.<span style="mso-spacerun: yes">&nbsp; </span>To work around
this, we copy the pointer to a temporary variable called <b style='mso-bidi-font-weight:
normal'>mainFun</b> and then call it, passing the <b style='mso-bidi-font-weight:
normal'>initialArgument</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The thread’s main function may
never return, but if it does, <b style='mso-bidi-font-weight:normal'>ThreadStartMain</b>
will call the KPL routine <b style='mso-bidi-font-weight:normal'>ThreadFinish</b>
to terminate the thread.<span style="mso-spacerun: yes">&nbsp; </span><b
style='mso-bidi-font-weight:normal'>ThreadFinish</b> will not return.<span
style="mso-spacerun: yes">&nbsp; </span>Of course the thread’s main function
may call <b style='mso-bidi-font-weight:normal'>ThreadFinish</b> itself
directly.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Thread
Termination<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Whenever a thread wishes to
terminate itself, it can call the function <b style='mso-bidi-font-weight:normal'>ThreadFinish</b>,
which is shown next:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
ThreadFinish ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>junk: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>junk = SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>threadsToBeDestroyed.AddToEnd
(currentThread)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>currentThread.Sleep ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This function will add the
currently running thread to the <b style='mso-bidi-font-weight:normal'>threadsToBeDestroyed</b>
list and then invoke the method <b style='mso-bidi-font-weight:normal'>Sleep</b>.<span
style="mso-spacerun: yes">&nbsp; </span>It first disables interrupts because
this list is shared among all threads and because <b style='mso-bidi-font-weight:
normal'>Sleep</b> expects interrupts to be disabled on entry.<span
style="mso-spacerun: yes">&nbsp; </span>Recall that when the <b
style='mso-bidi-font-weight:normal'>Run</b> function is invoked next and a new
thread is scheduled, <b style='mso-bidi-font-weight:normal'>Run</b> will check
the <b style='mso-bidi-font-weight:normal'>threadsToBeDestroyed</b> list.<span
style="mso-spacerun: yes">&nbsp; </span>If there is anything on the list, then <b
style='mso-bidi-font-weight:normal'>Run</b> can perform any
finalization&#8212;such as recycling the <b style='mso-bidi-font-weight:normal'>Thread</b>
object&#8212;that must be done after the thread has terminated.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The method <b style='mso-bidi-font-weight:
normal'>Thread.Sleep</b>, which is shown next, can be called from several
places.<span style="mso-spacerun: yes">&nbsp; </span>It can be called by a
thread that is about to terminate, as above, but it can also be called by a
thread that needs to go to sleep for a while, until some other thread takes
some action to wake it up.<span style="mso-spacerun: yes">&nbsp; </span>For
example, when we discuss semaphores, we’ll see that the method <b
style='mso-bidi-font-weight:normal'>Semaphore.Down</b> may put the current
thread to sleep.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>method</span></u><span style='font-family:Courier'>
Sleep ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>nextTh: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>status = BLOCKED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>nextTh = readyList.Remove ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>Run (nextTh)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endMethod<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Sleep</b> method will always be invoked on the current thread and will
always be called with interrupts disabled.<span style="mso-spacerun:
yes">&nbsp; </span>It will change the current thread’s status to <b
style='mso-bidi-font-weight:normal'>BLOCKED</b>.<span style="mso-spacerun:
yes">&nbsp; </span>Then, it will remove the next thread from the ready list and
call <b style='mso-bidi-font-weight:normal'>Run</b> to switch to it.<span
style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>Sleep</b> method does not put the current thread on any list; the assumption
is that the caller will have done that, if necessary.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Note that the ready list will
never be empty since the idle thread will always be present and ready to run,
so the called to <b style='mso-bidi-font-weight:normal'>Remove</b> will never
fail.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The Idle
Thread<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>As part of the initialization of
the scheduler, a thread called the <i style='mso-bidi-font-style:normal'>idle
thread</i> is created and added to the ready list with this code:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>idleThread.Init (&quot;idle-thread&quot;)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>idleThread.Fork (IdleFunction, 0)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The main purpose of the idle
thread is to make sure that the ready list is never empty.<span
style="mso-spacerun: yes">&nbsp; </span>If the ready list were empty, what
would the scheduler do if the currently running thread wanted to sleep?</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The code of the idle thread,
shown next, essentially contains an infinite loop that calls <b
style='mso-bidi-font-weight:normal'>Yield</b>.<span style="mso-spacerun:
yes">&nbsp; </span>Whenever the idle thread gets scheduled, it immediately
gives up the CPU to the next thread in the ready list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>However, the idle thread first
checks to see if there are any threads in the ready list.<span
style="mso-spacerun: yes">&nbsp; </span>If the ready list is empty then,
instead of calling <b style='mso-bidi-font-weight:normal'>Yield</b>, it calls a
function named <b style='mso-bidi-font-weight:normal'>Wait</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
IdleFunction (arg: <u>int</u>)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>junk: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>while</u> true<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>junk = SetInterruptsTo
(DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>if</u> readyList.IsEmpty
()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Wait ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>else<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>currentThread.Yield ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endWhile<o:p></o:p></u></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The function <b style='mso-bidi-font-weight:
normal'>Wait</b> is an assembly language routine that simply invokes the <span
style='font-family:Courier'>wait</span> machine instruction and returns.<span
style="mso-spacerun: yes">&nbsp; </span>The <span style='font-family:Courier'>wait</span>
instruction will enable interrupts and halt the CPU execution, putting the
machine into a low-power <i style='mso-bidi-font-style:normal'>wait state</i>.<span
style="mso-spacerun: yes">&nbsp; </span>The CPU will stay in this state of
suspended animation until the next interrupt occurs.<span style="mso-spacerun:
yes">&nbsp; </span>Then the CPU will wake up and resume instruction
execution.<span style="mso-spacerun: yes">&nbsp; </span>Of course the first
thing that will happen is that the interrupt will be serviced.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the case that a timer
interrupt ended the <span style='font-family:Courier'>wait</span> instruction,
the interrupt handler will invoke <b style='mso-bidi-font-weight:normal'>Yield</b>,
which will ultimately return to the idle thread, since there are no other
threads.<span style="mso-spacerun: yes">&nbsp; </span>But in the case of other
interrupts, such as disk I/O or terminal I/O, the interrupt handler will most
likely make another thread runnable.<span style="mso-spacerun: yes">&nbsp;
</span>Back in the idle thread, after the return from <b style='mso-bidi-font-weight:
normal'>Wait</b>, the function will loop and then call <b style='mso-bidi-font-weight:
normal'>Yield</b> to switch over to the newly ready thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The Current
Interrupt Status<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the code for <b
style='mso-bidi-font-weight:normal'>SetInterruptsTo</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>function</span></u><span style='font-family:Courier'>
SetInterruptsTo (newStatus: <u>int</u>) <u>returns</u> <u>int</u><o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>Cleari ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>oldStat = currentInterruptStatus<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>if</u> newStatus == ENABLED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>currentInterruptStatus =
ENABLED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Seti ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>else<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>currentInterruptStatus =
DISABLED<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Cleari ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>return</u> oldStat<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endFunction<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The methods <b style='mso-bidi-font-weight:
normal'>Cleari</b> and <b style='mso-bidi-font-weight:normal'>Seti</b> are
assembly routines that execute the <span style='font-family:Courier'>cleari</span>
and <span style='font-family:Courier'>seti</span> instructions (respectively)
and return.<span style="mso-spacerun: yes">&nbsp; </span>The <span
style='font-family:Courier'>cleari</span> instruction clears the <i
style='mso-bidi-font-style:normal'>interrupts-enabled</i> bit in the Status
Register, thereby disabling interrupts.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>Similarly, the <span style='font-family:Courier'>seti</span>
instruction sets the bit, which enables interrupts.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>There is a global variable named <b
style='mso-bidi-font-weight:normal'>currentInterruptStatus</b> that attempts to
mirror the state of this bit of the Status Register, so that programs can check
to see whether interrupts are, at any point, enabled or disabled.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Since <b style='mso-bidi-font-weight:
normal'>currentInterruptStatus</b> is a shared variable, the above code must be
very careful when modifying it, in order to prevent other threads from
interfering and creating an inconsistent state.<span style="mso-spacerun:
yes">&nbsp; </span>So this routine starts with a call to <b style='mso-bidi-font-weight:
normal'>Cleari</b> to disable interrupts, thereby ensuring that it can complete
without interruption.<span style="mso-spacerun: yes">&nbsp; </span>[The second
call to <b style='mso-bidi-font-weight:normal'>Cleari</b> is redundant and
unnecessary, but is included for… uh… “aesthetic reasons.”]</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Semaphores<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ scheduler includes an
implementation of semaphores, which we will discuss next.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Recall that “semaphore” is an <i
style='mso-bidi-font-style:normal'>abstract data type</i> (ADT), which means
that it may only be used by invoking the operations defined on the type.<span
style="mso-spacerun: yes">&nbsp; </span>An instance of an abstract data type
may have internal state, but this is an implementation detail.<span
style="mso-spacerun: yes">&nbsp; </span>Users of the type should only use the
operations and should never access the internal state directly.<span
style="mso-spacerun: yes">&nbsp; </span>The internal state can only be queried
or modified by the code implementing the operations.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the case of semaphores, there
are two key operations, called <i style='mso-bidi-font-style:normal'>Up</i> and
<i style='mso-bidi-font-style:normal'>Down</i>.<span style="mso-spacerun:
yes">&nbsp; </span>One way to understand a semaphore is to think of it as an
integer counter which can never go negative.<span style="mso-spacerun:
yes">&nbsp; </span>The <i style='mso-bidi-font-style:normal'>Up</i> operation
will increment the integer by one, while the <i style='mso-bidi-font-style:
normal'>Down</i> operation will attempt to decrement the count by one.<span
style="mso-spacerun: yes">&nbsp; </span>If the count is already at zero, a <i
style='mso-bidi-font-style:normal'>Down</i> operation will freeze the thread
until some other thread has invoked <i style='mso-bidi-font-style:normal'>Up</i>
and the count is no longer zero.<span style="mso-spacerun: yes">&nbsp;
</span>Then <i style='mso-bidi-font-style:normal'>Down</i> can safely decrement
the counter and resume execution of the frozen thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Semaphores are implemented with a
class called <b style='mso-bidi-font-weight:normal'>Semaphore</b>, which is
shown next:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>class</span></u><span style='font-family:Courier'>
Semaphore<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>superclass</u> Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>count: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>waitingThreads: List
[Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Init (initialCount: <u>int</u>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Down ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Up ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In general, it is convenient to represent
each abstract data type with a KPL class.<span style="mso-spacerun: yes">&nbsp;
</span>Fields are used to represent the internal state of the object and
methods are used to implement the abstract data<span style="mso-spacerun:
yes">&nbsp; </span>type’s operations.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>KPL&#8212;unlike some
object-oriented languages&#8212;has no mechanism to enforce a barrier between
“inside” the object and “outside” the object.<span style="mso-spacerun:
yes">&nbsp; </span>For example, Java and C++ attach attributes like “public”
and “private” to fields and methods.<span style="mso-spacerun: yes">&nbsp;
</span>In KPL, there is nothing to prevent the programmer from writing code
that accesses the fields from outside the object, except common sense and
self-discipline. KPL is designed for kernel code authors; the assumption is
that a simple, flexible language model is well-suited for programmers with a
high level of skill.<span style="mso-spacerun: yes">&nbsp; </span>Language
restrictions certainly have their place, but can occasionally get in the way in
kernel code.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Users of <b style='mso-bidi-font-weight:
normal'>Semaphore</b> should only invoke the <b style='mso-bidi-font-weight:
normal'>Init</b>, <b style='mso-bidi-font-weight:normal'>Down</b>, and <b
style='mso-bidi-font-weight:normal'>Up</b> methods; users should never access or
even read the fields.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The implementation of <b
style='mso-bidi-font-weight:normal'>Semaphore</b> includes two fields, called <b
style='mso-bidi-font-weight:normal'>count</b> and <b style='mso-bidi-font-weight:
normal'>waitingThreads</b>.<span style="mso-spacerun: yes">&nbsp; </span>The <b
style='mso-bidi-font-weight:normal'>count</b> roughly corresponds to the hidden
“count” we referred to above, but in the code below, notice carefully that the
correspondence is not exact, since the <b style='mso-bidi-font-weight:normal'>count</b>
field can and will go negative!</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The field called <b
style='mso-bidi-font-weight:normal'>waitingThreads</b> is a list of <b
style='mso-bidi-font-weight:normal'>Thread</b> objects, namely those threads
that are suspended on this semaphore.<span style="mso-spacerun: yes">&nbsp;
</span>When a thread invokes <b style='mso-bidi-font-weight:normal'>Down</b>
and the count would go negative, that thread is suspended and is added to the
list of <b style='mso-bidi-font-weight:normal'>waitingThreads</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the code for the methods
of this class:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>behavior</span></u><span style='font-family:Courier'>
Semaphore<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Init (initialCount: <u>int</u>)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>count = initialCount<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>waitingThreads = <u>new</u>
List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Down ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>oldIntStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>count = count - 1<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>if</u> count &lt; 0<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>waitingThreads.AddToEnd (currentThread)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>currentThread.Sleep ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Up ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>oldIntStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat = SetInterruptsTo
(DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>count = count + 1<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>if</u> count &lt;= 0<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t =
waitingThreads.Remove ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t.status =
READY<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>readyList.AddToEnd (t)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endBehavior<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Look at the <b style='mso-bidi-font-weight:
normal'>Down</b> method first.<span style="mso-spacerun: yes">&nbsp; </span>It
decrements <b style='mso-bidi-font-weight:normal'>count</b> and, if it went
negative, then the thread is suspended.<span style="mso-spacerun: yes">&nbsp;
</span>To do this, the <b style='mso-bidi-font-weight:normal'>Down</b> method
puts the current thread on the list called <b style='mso-bidi-font-weight:normal'>waitingThreads</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Then it calls <b style='mso-bidi-font-weight:
normal'>Sleep</b> to suspend execution of the current thread.<span
style="mso-spacerun: yes">&nbsp; </span>This thread will only be awakened by
some other thread when the count goes non-negative.<span style="mso-spacerun:
yes">&nbsp; </span>Since the fields <b style='mso-bidi-font-weight:normal'>count</b>
and <b style='mso-bidi-font-weight:normal'>waitingThreads</b> are shared by all
threads using this semaphore, this method temporarily disables interrupts while
these fields are accessed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next look at the <b
style='mso-bidi-font-weight:normal'>Up</b> method.<span style="mso-spacerun:
yes">&nbsp; </span>First, it increments <b style='mso-bidi-font-weight:normal'>count</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Then it checks the <b style='mso-bidi-font-weight:
normal'>count</b> and possibly wakes up one of the threads waiting on this
semaphore.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>One way to think about the <b
style='mso-bidi-font-weight:normal'>count</b> field is this:<span
style="mso-spacerun: yes">&nbsp; </span>If <b style='mso-bidi-font-weight:normal'>count</b>
is positive, its value tells how many more <b style='mso-bidi-font-weight:normal'>Up</b>
operations have been executed than <b style='mso-bidi-font-weight:normal'>Down</b>
operations.<span style="mso-spacerun: yes">&nbsp; </span>If <b
style='mso-bidi-font-weight:normal'>count</b> is negative, then more <b
style='mso-bidi-font-weight:normal'>Down</b> operations have occurred.<span
style="mso-spacerun: yes">&nbsp; </span>Each thread that called <b
style='mso-bidi-font-weight:normal'>Down</b>, for which there was no
corresponding <b style='mso-bidi-font-weight:normal'>Up</b> operation, was
suspended.<span style="mso-spacerun: yes">&nbsp; </span>The absolute value of <b
style='mso-bidi-font-weight:normal'>count</b> simply tells how many threads are
waiting.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>So if <b style='mso-bidi-font-weight:
normal'>count</b> is was negative before <b style='mso-bidi-font-weight:normal'>Up</b>
was called, then the <b style='mso-bidi-font-weight:normal'>Up</b> method will
take a thread off the list, change its <b style='mso-bidi-font-weight:normal'>status</b>
to <b style='mso-bidi-font-weight:normal'>READY</b> and add it to the ready
list.<span style="mso-spacerun: yes">&nbsp; </span>And notice that since <b
style='mso-bidi-font-weight:normal'>count</b>, the <b style='mso-bidi-font-weight:
normal'>waitingThreads</b> list and the <b style='mso-bidi-font-weight:normal'>readyList</b>
are all shared variables, this method will disable interrupts while they are
being accessed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Waiting threads are always added
to the tail end of the <b style='mso-bidi-font-weight:normal'>waitingThreads</b>
list.<span style="mso-spacerun: yes">&nbsp; </span>When awakened, threads are
always removed from the front of the list.<span style="mso-spacerun:
yes">&nbsp; </span>Therefore, the list is a FIFO queue; any thread that waits
will eventually be awakened&#8212;i.e., starvation is not a
possibility&#8212;as long as there are enough calls to <b style='mso-bidi-font-weight:
normal'>Up</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'>Semaphore</b> objects must be initialized and an initial count must be
supplied.<span style="mso-spacerun: yes">&nbsp; </span>This is usually zero,
but it can be any positive number, which acts as if that many excess <b
style='mso-bidi-font-weight:normal'>Up</b> operations had been performed.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>var<o:p></o:p></span></u></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp;
</span>mySem: Semaphore = <u>new</u> Semaphore<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>mySem.Init (0)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>mySem.Up ()<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>mySem.Down ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Mutex Locks<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The BLITZ system also includes <i
style='mso-bidi-font-style:normal'>mutex locks</i>.<span style="mso-spacerun:
yes">&nbsp; </span>A mutex lock has two important operations, called <i
style='mso-bidi-font-style:normal'>Lock</i> and <i style='mso-bidi-font-style:
normal'>Unlock</i>.<span style="mso-spacerun: yes">&nbsp; </span>Similarly to
semaphores, mutex locks are modeled with an abstract data type.<span
style="mso-spacerun: yes">&nbsp; </span>As such, there is a class called <b
style='mso-bidi-font-weight:normal'>Mutex</b>, with methods called <b
style='mso-bidi-font-weight:normal'>Lock</b> and <b style='mso-bidi-font-weight:
normal'>Unlock</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is the class specification:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>class</span></u><span style='font-family:Courier'>
Mutex<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>superclass</u> Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Init ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Lock ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Unlock ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>As part of the BLITZ operating
systems project, the implementation of the <b style='mso-bidi-font-weight:normal'>Mutex</b>
class is left as an exercise.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>There are several ways to
implement the <b style='mso-bidi-font-weight:normal'>Mutex</b> class.<span
style="mso-spacerun: yes">&nbsp; </span>One approach is to use a <b
style='mso-bidi-font-weight:normal'>Semaphore</b> object, in which case the <b
style='mso-bidi-font-weight:normal'>Lock</b> operation is nothing more than <b
style='mso-bidi-font-weight:normal'>Semaphore.Down</b>.<span
style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>Unlock</b> operation is implemented with <b style='mso-bidi-font-weight:
normal'>Semaphore.Up</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In the project assignment,
students are asked to implement the <b style='mso-bidi-font-weight:normal'>Mutex</b>
class using the same approach used for class <b style='mso-bidi-font-weight:
normal'>Semaphore</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Without giving too much away, the
general idea is that <b style='mso-bidi-font-weight:normal'>Mutex</b> will need
two fields.<span style="mso-spacerun: yes">&nbsp; </span>One will indicate the
state of the lock, either “held” or “free”.<span style="mso-spacerun:
yes">&nbsp; </span>The second will be a list of threads suspended and waiting
on the lock, which might be called <b style='mso-bidi-font-weight:normal'>waitingThreads</b>.<span
style="mso-spacerun: yes">&nbsp; </span>If the lock is free, then the list will
be empty; if the lock is held, there may or may not be threads waiting.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Lock</b> operation will need to check to see if the lock is currently
“free”.<span style="mso-spacerun: yes">&nbsp; </span>If so, it will change its
state to “held” and return.<span style="mso-spacerun: yes">&nbsp;
</span>Otherwise, it will suspend the current thread on the <b
style='mso-bidi-font-weight:normal'>waitingThreads</b> list.<span
style="mso-spacerun: yes">&nbsp; </span>Of course, the method will need to
disable interrupts while the fields are accessed, to prevent concurrency race
conditions.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <b style='mso-bidi-font-weight:
normal'>Unlock</b> method will need to remove a thread from the <b
style='mso-bidi-font-weight:normal'>waitingThreads</b> list and, if there was a
waiting thread, transfer the lock to that thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>The Monitor
Concept<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The <i style='mso-bidi-font-style:
normal'>monitor</i> concept is a particularly useful concurrency control
structuring technique.<span style="mso-spacerun: yes">&nbsp; </span>Like
semaphores and mutex locks, monitors can be used to correctly program
multithreaded applications where several threads must interact and synchronize
their access to shared data.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>A monitor is a little like a
class.<span style="mso-spacerun: yes">&nbsp; </span>A monitor will have hidden
state, just as objects have fields.<span style="mso-spacerun: yes">&nbsp;
</span>And a monitor will have <i style='mso-bidi-font-style:normal'>entry
methods</i> which can be invoked, just as an object’s class provides several
methods which can be invoked on the object.<span style="mso-spacerun:
yes">&nbsp; </span>So, as a first approximation, a monitor is much like an
object.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The difference between an object
and a monitor lies in what happens when several threads invoke methods
concurrently.<span style="mso-spacerun: yes">&nbsp; </span>With a normal
object, if two threads try to invoke a method on the object simultaneously, the
two methods will execute concurrently.<span style="mso-spacerun: yes">&nbsp;
</span>Perhaps the two threads invoke the same method or perhaps they invoke
different methods in the class, but the key is that both threads are invoking
methods on the same object.<span style="mso-spacerun: yes">&nbsp; </span>These
method will be executed concurrently and, without any further control, havoc
may occur.<span style="mso-spacerun: yes">&nbsp; </span>For example, the threads
may each try to access the same field in the object simultaneously.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>With a monitor, the following
statement is always true: “Only one thread at a time can execute code within
the monitor.”<span style="mso-spacerun: yes">&nbsp; </span>This means that if
one thread is executing a method of the monitor and a second thread attempts to
invoke a method of the same monitor, then the second thread will be forced
(somehow!) to wait until the first thread returns and leaves the monitor code.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Some languages provide special
support for the monitor concept, but KPL does not.<span style="mso-spacerun:
yes">&nbsp; </span>However, monitors can be conveniently coded in KPL, as long
as the programmer follows a few rules and guidelines.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We will implement each monitor
with a KPL class.<span style="mso-spacerun: yes">&nbsp; </span>More precisely,
for each kind of monitor, the programmer will create a class.<span
style="mso-spacerun: yes">&nbsp; </span>Then, at runtime, when the monitor is
needed, the programmer will use an object of that class.<span
style="mso-spacerun: yes">&nbsp; </span>The distinction between an “object” and
a “class of objects” is similar to the distinction between a “monitor” and a
“kind of monitor.”<span style="mso-spacerun: yes">&nbsp; </span>In most problems&#8212;such
as the <i style='mso-bidi-font-style:normal'>Dining Philosophers Problem</i>&#8212;only
one instance of the monitor is needed.<span style="mso-spacerun: yes">&nbsp;
</span>So the programmer would create a class for the monitor and then allocate
a single object of that class.<span style="mso-spacerun: yes">&nbsp; </span>To
be more precise, when we say the <i style='mso-bidi-font-style:normal'>monitor
class</i>, we’ll mean a class and when we say the <i style='mso-bidi-font-style:
normal'>monitor</i>, we’ll mean an instance of this class.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>As an example, let’s say we want
to create a monitor for the “Dining Philosophers Problem.”<span
style="mso-spacerun: yes">&nbsp; </span>Let’s call the monitor class <b
style='mso-bidi-font-weight:normal'>ForkMonitor</b>.<span style="mso-spacerun:
yes">&nbsp; </span>Each monitor class must have a method called <b
style='mso-bidi-font-weight:normal'>Init</b>, which must be called when the
monitor is created.<span style="mso-spacerun: yes">&nbsp; </span>So to create
and initialize a monitor, we’ll see code like this:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><u><span
style='font-family:Courier'>var<o:p></o:p></span></u></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'><span style="mso-spacerun: yes">&nbsp;
</span>myForkMon: ForkMonitor<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>myForkMon = <u>new</u> ForkMonitor<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>myForkMon.Init ()<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-align:justify'><span
style='font-family:Courier'>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Of course we can also use
pointers to monitor objects, or even arrays of pointers to monitors, etc., but
for this problem, such a complex data structure is unnecessary.<span
style="mso-spacerun: yes">&nbsp; </span>A program may have several kinds of
monitors, but it is unusual to see a program with more than one monitor of each
kind.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In our implementation of
monitors, we need to enforce the invariant about only one thread at a time
executing code in the monitor.<span style="mso-spacerun: yes">&nbsp; </span>[We
define “code in the monitor” as the code of any method in the monitor class
and, if other functions or methods are called from this code, we’ll include
them, too.]</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>If the programmer follows some
simple conventions consistently, then enforcing the invariant is easy.<span
style="mso-spacerun: yes">&nbsp; </span>First, every monitor class should
include a field of type <b style='mso-bidi-font-weight:normal'>Mutex</b>.<span
style="mso-spacerun: yes">&nbsp; </span>When locked, it indicates that some
thread is already executing code within the monitor.<span style="mso-spacerun:
yes">&nbsp; </span>When unlocked, there are no threads in the monitor.<span
style="mso-spacerun: yes">&nbsp; </span>For simplicity, let’s always call this
field <b style='mso-bidi-font-weight:normal'>monitorLock</b>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Next, the programmer needs to
make a clear distinction about which methods are “entry methods” and which are
local, private methods.<span style="mso-spacerun: yes">&nbsp; </span>Any method
called from outside the monitor is an entry method.<span style="mso-spacerun:
yes">&nbsp; </span>Viewing the monitor as an abstract data type, entry methods
are the externally visible operations; they can be invoked to “get into” the
monitor.<span style="mso-spacerun: yes">&nbsp; </span>All other methods in the
class are private methods and should only be invoked by entry methods or other
private methods.<span style="mso-spacerun: yes">&nbsp; </span>In other words,
code outside the monitor should never invoke a private method directly.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>class</span></u><span style='font-family:Courier'>
ForkMonitor<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>superclass</u> Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>monitorLock: Mutex<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Init ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyEntryMethod_1 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyEntryMethod_2 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyEntryMethod_3 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyPrivateMethod_1 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyPrivateMethod_2 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyPrivateMethod_3 (...)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>To enforce the invariant that only
one thread at a time is in the monitor, the programmer must remember to always
lock the <b style='mso-bidi-font-weight:normal'>monitorLock</b> as the first
operation of every entry method.<span style="mso-spacerun: yes">&nbsp;
</span>Also, the programmer must remember to unlock the <b style='mso-bidi-font-weight:
normal'>monitorLock</b> before returning from an entry method.<span
style="mso-spacerun: yes">&nbsp; </span>The <b style='mso-bidi-font-weight:
normal'>monitorLock</b> should not be locked or unlocked at any other time.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Of course, if there is a <u><span
style='font-family:Courier'>return</span></u> in the middle of an entry method,
the monitor lock must still be unlocked.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Here is what all entry methods
should look like:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>method</span></u><span style='font-family:Courier'>
MyEntryMethod<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>monitorLock.Lock ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>if</u> ...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>monitorLock.Unlock ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>return<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>...<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span>monitorLock.Unlock ()<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endMethod<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Condition
Variables<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The monitor concept also includes
a related concept called the <i style='mso-bidi-font-style:normal'>condition
variable</i>.<span style="mso-spacerun: yes">&nbsp; </span>A condition variable
is similar to a mutex lock or a semaphore, in that a variable is created and
there are a couple of operations that can be performed on the condition
variable.<span style="mso-spacerun: yes">&nbsp; </span>The operations are named
<i style='mso-bidi-font-style:normal'>Signal</i>, <i style='mso-bidi-font-style:
normal'>Wait</i>, and <i style='mso-bidi-font-style:normal'>Broadcast</i>.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>However, condition variables are
different from mutexes and semaphores in that each condition variable is linked
to a specific monitor.<span style="mso-spacerun: yes">&nbsp; </span>Each
condition variable belongs to a monitor and should be defined as a field of
that monitor class.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Some monitors will have only one
condition variable, but some monitors&#8212;such as the <b style='mso-bidi-font-weight:
normal'>ForkMonitor </b>from the Dining Philosophers Problem&#8212;will
naturally contain several condition variables.<span style="mso-spacerun:
yes">&nbsp; </span>A monitor might have no condition variables, but then it
becomes an academic question of whether to even call it a monitor, or just a
collection of critical section code.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The operations on the condition
variables should only be invoked by code within the monitor.<span
style="mso-spacerun: yes">&nbsp; </span>In other words, whenever an operation,
such as <b style='mso-bidi-font-weight:normal'>Signal</b> or <b
style='mso-bidi-font-weight:normal'>Wait</b>, is performed on a condition, it
should be done by code that has previously acquired a lock on the monitor’s
lock.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Each condition variable will be
an instance of a class called <b style='mso-bidi-font-weight:normal'>Condition</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Here is the specification of class <b
style='mso-bidi-font-weight:normal'>Condition</b>:</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>class</span></u><span style='font-family:Courier'>
Condition<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>superclass</u> Object<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>fields<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>waitingThreads: List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>methods<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Init ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Wait (mutex: <u>ptr</u> <u>to</u>
Mutex)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Signal (mutex: <u>ptr</u> <u>to</u>
Mutex)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Broadcast (mutex: <u>ptr</u>
<u>to</u> Mutex)<o:p></o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endClass<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Notice that each of the
operations (except <b style='mso-bidi-font-weight:normal'>Init</b>) requires a
pointer to a <b style='mso-bidi-font-weight:normal'>Mutex</b> lock.<span
style="mso-spacerun: yes">&nbsp; </span>When these operations are invoked, the
caller should pass a pointer to the <b style='mso-bidi-font-weight:normal'>monitorLock</b>
of the monitor.<span style="mso-spacerun: yes">&nbsp; </span>Since the <b
style='mso-bidi-font-weight:normal'>Condition</b> operation is only used by
code in the monitor, it is assumed that the <b style='mso-bidi-font-weight:
normal'>monitorLock</b> has already been locked.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The semantics of condition
variables is given next.<span style="mso-spacerun: yes">&nbsp; </span>When code
executing in a monitor executes a <b style='mso-bidi-font-weight:normal'>Wait</b>
operation, that code will be suspended, i.e., the current thread will become
blocked, waiting on the condition.<span style="mso-spacerun: yes">&nbsp;
</span>At this point the <b style='mso-bidi-font-weight:normal'>monitorLock</b>
is unlocked and other threads are now free to enter the monitor.<span
style="mso-spacerun: yes">&nbsp; </span>The code executing the <b
style='mso-bidi-font-weight:normal'>Wait</b> operations is suspended and
another thread is now allowed to enter the monitor.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>At some future time, another
thread executing within the monitor will invoke a <b style='mso-bidi-font-weight:
normal'>Signal</b> operation on the condition variable.<span
style="mso-spacerun: yes">&nbsp; </span>At this point the first thread, which
was waiting, is awakened and becomes ready to run.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>But now we have two threads ready
to execute code in the monitor.<span style="mso-spacerun: yes">&nbsp;
</span>According to our invariant, this is not allowed.<span
style="mso-spacerun: yes">&nbsp; </span>So one thread must be forced to wait
until the other thread leaves the monitor.<span style="mso-spacerun:
yes">&nbsp; </span>Then the other thread can continue execution.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Which thread is allowed to
continue in the monitor?<span style="mso-spacerun: yes">&nbsp; </span>And which
thread must now wait for the lock?</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Over the years, different authors
have proposed different answers.<span style="mso-spacerun: yes">&nbsp;
</span>Tony Hoare proposed something now called <i style='mso-bidi-font-style:
normal'>Hoare Semantics</i>, which says that the signaling thread always waits
and the previous waiting thread (i.e., the one that called <b style='mso-bidi-font-weight:
normal'>Wait</b>) immediately enters the monitor.<span style="mso-spacerun:
yes">&nbsp; </span>Furthermore, no other threads can enter the monitor between
the execution of the <b style='mso-bidi-font-weight:normal'>Signal</b>
operation by one thread and the acquisition of the lock by the other thread.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In a looser specification of
condition variables, called <i style='mso-bidi-font-style:normal'>Mesa
Semantics</i>, the guarantee is only that the blocked thread will be
awakened.<span style="mso-spacerun: yes">&nbsp; </span>After that it will have
to compete against all other threads for the monitor lock.<span
style="mso-spacerun: yes">&nbsp; </span>Generally, the signaling thread will
continue executing and, when it leaves the monitor, the awakened thread, and
perhaps others, will try to acquire the monitor lock.<span style="mso-spacerun:
yes">&nbsp; </span>There is no guarantee about which thread will get the lock
first, only that the awakened thread will eventually get it.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In either case (either Hoare
Semantics or Mesa Semantics), the blocked thread will eventually get the
monitor lock and will resume execution of code in the monitor.<span
style="mso-spacerun: yes">&nbsp; </span>In particular, it will begin with a
return from the call to <b style='mso-bidi-font-weight:normal'>Wait</b>.<span
style="mso-spacerun: yes">&nbsp; </span>Also, with both semantics, the
guarantee is that each <b style='mso-bidi-font-weight:normal'>Signal</b>
operation will wake up exactly one thread, if any threads are waiting on the
condition.<span style="mso-spacerun: yes">&nbsp; </span>If there are no threads
waiting on the condition, then a <b style='mso-bidi-font-weight:normal'>Signal</b>
operation will have no effect.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>The implementation of the <b
style='mso-bidi-font-weight:normal'>Condition</b> class in BLITZ uses the
looser Mesa Semantics.<span style="mso-spacerun: yes">&nbsp; </span>The code is
given below.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Note that each <b
style='mso-bidi-font-weight:normal'>Condition</b> variable is implemented with
a single field called <b style='mso-bidi-font-weight:normal'>waitingThreads</b>,
which is a list of the threads that have executed a <b style='mso-bidi-font-weight:
normal'>Wait</b> operation on this condition variable, but which have not yet
been signaled to resume.<span style="mso-spacerun: yes">&nbsp; </span>The <b
style='mso-bidi-font-weight:normal'>Init</b> method simply initializes this
list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Looking at the <b
style='mso-bidi-font-weight:normal'>Wait</b> method, you can see that the
thread will first unlock the <b style='mso-bidi-font-weight:normal'>MonitorLock</b>,
allowing other threads to enter the monitor.<span style="mso-spacerun:
yes">&nbsp; </span>Then it will block itself, placing itself on the <b
style='mso-bidi-font-weight:normal'>waitingThreads</b> list.<span
style="mso-spacerun: yes">&nbsp; </span>Once awakened, the code in the <b
style='mso-bidi-font-weight:normal'>Wait</b> method will attempt to relock the <b
style='mso-bidi-font-weight:normal'>monitorLock</b>.<span style="mso-spacerun:
yes">&nbsp; </span>Only after it acquires the lock, will the method
return.<span style="mso-spacerun: yes">&nbsp; </span>Interrupts are disabled
the entire time; do you see why interrupts must be disabled between the call to
<b style='mso-bidi-font-weight:normal'>Unlock</b> and putting the thread on the
<b style='mso-bidi-font-weight:normal'>waitingThreads</b> list?</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Looking at the <b
style='mso-bidi-font-weight:normal'>Signal</b> method, you can see that it
simply takes a thread off the <b style='mso-bidi-font-weight:normal'>waitingThreads</b>
list&#8212;if there are any threads on the list&#8212;changes it back to <b
style='mso-bidi-font-weight:normal'>READY</b> and puts it on the ready
list.<span style="mso-spacerun: yes">&nbsp; </span>Since <b style='mso-bidi-font-weight:
normal'>Signal</b> never unlocks the <b style='mso-bidi-font-weight:normal'>monitorLock</b>,
we can see that in this implementation, the thread executing the <b
style='mso-bidi-font-weight:normal'>Signal</b> will continue in the monitor,
while the newly awakened thread will wait until it leaves the monitor before
competing (possibly with other threads) for the <b style='mso-bidi-font-weight:
normal'>monitorLock</b> before it continues.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-bottom:none;padding:1.0pt 4.0pt 0in 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><u><span
style='font-family:Courier'>behavior</span></u><span style='font-family:Courier'>
Condition<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-top-alt:
solid windowtext 2.25pt;mso-border-left-alt:solid windowtext 2.25pt;mso-border-right-alt:
solid windowtext 2.25pt;padding:0in;mso-padding-alt:1.0pt 4.0pt 0in 4.0pt'><span
style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

</div>

<div style='mso-element:para-border-div;border-top:none;border-left:solid windowtext 2.25pt;
border-bottom:none;border-right:solid windowtext 2.25pt;padding:0in 4.0pt 0in 4.0pt;
margin-left:.25in;margin-right:0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Init ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>waitingThreads = <u>new</u>
List [Thread]<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Wait (mutex: <u>ptr</u> <u>to</u>
Mutex)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>oldIntStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mutex.Unlock ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>waitingThreads.AddToEnd
(currentThread)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>currentThread.Sleep ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mutex.Lock ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Signal (mutex: <u>ptr</u>
<u>to</u> Mutex)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>oldIntStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>t = waitingThreads.Remove
()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>if</u> t<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t.status =
READY<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>readyList.AddToEnd (t)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>method</u> Broadcast (mutex: <u>ptr</u>
<u>to</u> Mutex)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>var<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>oldIntStat: <u>int</u><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t: <u>ptr</u> <u>to</u>
Thread<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (DISABLED)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>while</u> true<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t =
waitingThreads.Remove ()<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>if</u> t ==
null<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>break<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><u>endIf<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>t.status =
READY<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>readyList.AddToEnd (t)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><u>endWhile<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldIntStat =
SetInterruptsTo (oldIntStat)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><span
style="mso-spacerun: yes">&nbsp; </span><u>endMethod<o:p></o:p></u></span></p>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-right-alt:solid windowtext 2.25pt;
padding:0in;mso-padding-alt:0in 4.0pt 0in 4.0pt'><span style='font-family:Courier'><o:p>&nbsp;</o:p></span></p>

</div>

<div style='mso-element:para-border-div;border:solid windowtext 2.25pt;
border-top:none;padding:0in 4.0pt 1.0pt 4.0pt;margin-left:.25in;margin-right:
0in'>

<p class=MsoNormal style='text-align:justify;border:none;mso-border-left-alt:
solid windowtext 2.25pt;mso-border-bottom-alt:solid windowtext 2.25pt;
mso-border-right-alt:solid windowtext 2.25pt;padding:0in;mso-padding-alt:0in 4.0pt 1.0pt 4.0pt'><u><span
style='font-family:Courier'>endBehavior<o:p></o:p></span></u></p>

</div>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>As an optional exercise (part of
project 2, in the BLITZ operating system assignments), you are asked to
consider how you might change the code in the <b style='mso-bidi-font-weight:
normal'>Condition</b> class to implement Hoare semantics.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>We might also mention in passing
that Per Brinch Hansen suggested another semantic approach to condition
variables.<span style="mso-spacerun: yes">&nbsp; </span>His idea was to make
sure the thread executing the <b style='mso-bidi-font-weight:normal'>Signal</b>
immediately leaves the monitor so the monitor lock is always given to the newly
awakened thread immediately.<span style="mso-spacerun: yes">&nbsp;
</span>However, this approach has not been adopted since it sometimes places a
very awkward constraint on the programmer.<span style="mso-spacerun:
yes">&nbsp; </span>For example, sometimes one thread will need to signal
several condition variables or to signal one condition variable several times.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Sometimes it is convenient for a
thread to wake up, not one, but all threads waiting on a condition variable.<span
style="mso-spacerun: yes">&nbsp; </span>To facilitate this, our implementation
of <b style='mso-bidi-font-weight:normal'>Condition</b> includes a method
called <b style='mso-bidi-font-weight:normal'>Broadcast</b>.<span
style="mso-spacerun: yes">&nbsp; </span>It simply executes a while-loop to move
every thread on the <b style='mso-bidi-font-weight:normal'>waitingThreads</b>
list to the ready list.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
normal'><u><span style='font-size:20.0pt;mso-bidi-font-size:10.0pt'>Conclusion<o:p></o:p></span></u></b></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>In this document, we looked at
the thread scheduler used in the BLITZ operating system kernel project.<span
style="mso-spacerun: yes">&nbsp; </span>The kernel project is broken into 8
individual project assignments.<span style="mso-spacerun: yes">&nbsp;
</span>The thread scheduler is introduced at the beginning (in project 2)
because it underpins all other kernel code.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>This thread scheduler can run
alone and can be understood in isolation from the rest of the kernel.<span
style="mso-spacerun: yes">&nbsp; </span>In fact, the scheduler can be used to
implement multi-threaded applications that are independent of any kernel.<span
style="mso-spacerun: yes">&nbsp; </span>For example, the thread scheduler
described here can be used to program solutions to classic concurrency control
problems, such as <i style='mso-bidi-font-style:normal'>Producer-Consumer</i>, <i
style='mso-bidi-font-style:normal'>Reader-Writer</i>, <i style='mso-bidi-font-style:
normal'>Dining Philosophers</i>, <i style='mso-bidi-font-style:normal'>Sleeping
Barber</i>, and so on.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'>Project 2 is all about
understanding multithreaded applications, concurrency control primitives, and
time-slicing.<span style="mso-spacerun: yes">&nbsp; </span>If you are a student
attempting project 2, we hope this material has put you in a better position to
understand and do the project.<span style="mso-spacerun: yes">&nbsp; </span>And
if you have a more general interest in thread scheduling or in the BLITZ
system, we hope this information has been interesting and useful, as well.</p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
