<html xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Hardware Overview"><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="HardwareOverview_files/filelist.xml"><title>Hardware Overview</title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Harry Porter</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Harry Porter</o:LastAuthor>  <o:Revision>2</o:Revision>  <o:LastPrinted>2007-09-19T00:14:00Z</o:LastPrinted>  <o:Created>2007-09-19T00:15:00Z</o:Created>  <o:LastSaved>2007-09-19T00:15:00Z</o:LastSaved>  <o:Pages>6</o:Pages>  <o:Words>2410</o:Words>  <o:Characters>13741</o:Characters>  <o:Lines>114</o:Lines>  <o:Paragraphs>27</o:Paragraphs>  <o:CharactersWithSpaces>16874</o:CharactersWithSpaces>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--><style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}h1	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:1;	font-size:16.0pt;	font-family:Times;	mso-font-kerning:0pt;	font-weight:normal;	font-style:italic;}h2	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:2;	font-size:26.0pt;	font-family:Times;	text-decoration:underline;	text-underline:single;}h3	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:3;	font-size:14.0pt;	font-family:Times;	font-weight:normal;	font-style:italic;}p.MsoHeader, li.MsoHeader, div.MsoHeader	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoFooter, li.MsoFooter, div.MsoFooter	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	font-size:36.0pt;	font-family:Times;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:.5in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle	{margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	font-size:48.0pt;	font-family:Times;	font-weight:bold;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:Times;}@page Section1	{size:8.5in 11.0in;	margin:1.0in 1.0in 1.0in 1.0in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-title-page:yes;	mso-header:url(":HardwareOverview_files:header.htm") h1;	mso-footer:url(":HardwareOverview_files:header.htm") f1;	mso-first-footer:url(":HardwareOverview_files:header.htm") ff1;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style></head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span style='font-size:20.0pt'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></span></p><p class=MsoTitle><span style='font-size:28.0pt'><b>An Overview of the<o:p></o:p></b></span></p><p class=MsoSubtitle><span style='font-size:36.0pt'>BLITZ Computer Hardware<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><h1><span style='font-size:14.0pt'>Harry H. Porter III<o:p></o:p></span></h1><h3>Department of Computer Science</h3><h1><span style='font-size:14.0pt'>Portland State University<o:p></o:p></span></h1><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Introduction<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText>The BLITZ computer was designed solely to support thedevelopment of operating system kernel code by students in a university-levelOS course.<span style="mso-spacerun: yes">&nbsp; </span>The BLITZ computer isnot a real, physical machine.<span style="mso-spacerun: yes">&nbsp;</span>Instead, the hardware is emulated entirely in software.</p><p class=MsoBodyText><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText>This document introduces the BLITZ computer “hardware” anddescribes it in broad, general terms.<span style="mso-spacerun: yes">&nbsp;</span>Greater detail can be found in the document “The BLITZ Architecture.”</p><p class=MsoBodyText><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText>The BLITZ machine is modeled loosely on the Sun SPARCarchitecture.<span style="mso-spacerun: yes">&nbsp; </span>The reader isassumed to be familiar with the main concepts of CPUs and assembly languageprogramming in general, but not with any specific CPU architecture inparticular.</p><p class=MsoBodyText><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText>Students who use the BLITZ system for OS kerneldevelopment will not need to write a single line of assembly code.<spanstyle="mso-spacerun: yes">&nbsp; </span>The necessary assembly routines areprovided by the instructor.<span style="mso-spacerun: yes">&nbsp;</span>Nevertheless, students need an understanding of the BLITZ hardware sothey can look over and understand the assembly routines.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>User Mode and System Mode<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>At any time, the CPU is executingin either system mode or user mode.<span style="mso-spacerun: yes">&nbsp;</span>Kernel code executes in system mode, while user-level programs executein user mode.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Any instruction may be executedin system mode, but some instructions are privileged in the sense that they mayonly be executed in system mode.<span style="mso-spacerun: yes">&nbsp;</span>Examples of privileged instructions include the instructions to alterthe page tables and to change the mode itself.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:20.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><h2><span style='font-size:20.0pt'>Registers<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU is a 32-bitarchitecture.<span style="mso-spacerun: yes">&nbsp; </span>There are 16 generalpurpose registers (called r0 through r15) with 32 bits each.<spanstyle="mso-spacerun: yes">&nbsp; </span>In addition, there are 16 floatingpoint registers (called f0 through f15) which can each hold a double precisionfloating point value.<span style="mso-spacerun: yes">&nbsp; </span>The maintypes of data are bytes, 32-bit signed integers, and 64-bit floating pointvalues.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>There are 2 sets of the integerregisters, one for system mode and one for user mode.<span style="mso-spacerun:yes">&nbsp; </span>This reduces the time for context switches between user codeand kernel code, since user registers need not be saved.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Additional registers include aprogram counter (PC); a status registers (SR), and two registers related to thepage table.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Instructions<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ CPU can be programmedin either a high level language called “KPL” or in assembler.<spanstyle="mso-spacerun: yes">&nbsp; </span>Included in the BLITZ tool set are acompiler, an assembler, a linker, and a debugger.<span style="mso-spacerun:yes">&nbsp; </span>All BLITZ tools run on the Unix platform.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The assembly language resemblesthe Sun SPARC assembly language.<span style="mso-spacerun: yes">&nbsp; </span>Beloware some sample instructions.<span style="mso-spacerun: yes">&nbsp; </span>Inassembly code, comments follow an exclamation point.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>add<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,r3,r4<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! 32-bit addition<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mul<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,ELT_SIZE,r2<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>! multiply<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>sll<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,1,r2<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! shift left<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>and<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,0x000000ff,r2<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>! bitwise logical and<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>cmp<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,r3<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! compare and set status register<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>bl<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mylabel<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! branch if less than<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>neg<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,r3<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! arithmetic negation<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>bclr<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>r2,0x00000c01,r3<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>! clear selected bits<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mov<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r2,r4<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! move between regs<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>mov<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>123,r5<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load 16-bit value into reg<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>set<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>MyVar,r2<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load 32-bit value into reg<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>load<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[r2],r7<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load 32-bits from memory<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>loadb<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>[r2],r7<span style="mso-spacerun:yes">&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! loadbyte from memory<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>store<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>r7,[r2]<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! store 32-bits into memory<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>loadv<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>[r2],r7<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load using virtual memory address<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>call<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>foo<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! invoke a function<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>jmp<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>mylabel<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! goto<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;</span>ret<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! return<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>reti<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! return from interrupt<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>push<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>r3<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! push onto stack<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>pop<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>r3<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! pop<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ldaddr<spanstyle="mso-spacerun: yes">&nbsp; </span>MyVar,r2<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load address of MyVar into reg<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>syscall r2<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! system call trap<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>seti<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! enable interrupts<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>setp<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! turn on paging<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>clears<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! switch to user mode<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>tset<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[r2],r3<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! test and set<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>readu<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>r2,r5<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! read from user register set<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ldptbr<spanstyle="mso-spacerun: yes">&nbsp; </span>r2<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load page table base register<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ftoi<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>f3,r5<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! floating to integer conversion<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fadd<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>f2,f3,f4<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! floating-point add<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fcmp<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>f2,f3<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! floating-pointcompare<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fsqrt<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>f2,r3<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! floating-point square root<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fload<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>[r2],f3<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! load from memory to floating reg<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>nop<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! do nothing<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>wait<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! enter low-power wait state<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>debug<spanstyle="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>! to facilitate student debugging<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The above list is notexhaustive.<span style="mso-spacerun: yes">&nbsp; </span>In total, there are 69different instructions plus 9 “synthetic instructions,” giving a total of 78instructions. (A synthetic instruction is translated by the assembler into oneof the existing 69 instructions.)<span style="mso-spacerun: yes">&nbsp;</span>The above list contains only 40 of the 78 instructions.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>There are 114 distinct numericopcodes.<span style="mso-spacerun: yes">&nbsp; </span>This number is greaterthan 69 because many of the instructions have several forms.<spanstyle="mso-spacerun: yes">&nbsp; </span>For example, the “load” instruction isconceptually one instruction, although it has several forms, with differentnumeric opcodes.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>load<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[r2+r3],r7<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>load<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>[r2+1000],r7<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>load<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[r2],r7<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The assembler accepts a number ofdirectives (sometimes called “pseudo-ops”).<span style="mso-spacerun:yes">&nbsp; </span>Here are some examples:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.ascii<span style="mso-spacerun: yes">&nbsp;&nbsp;</span>&quot;hello\n&quot;<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.byte<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>('a'+4)&amp;0x0f<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.word<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>MyLabel+4<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.double<span style="mso-spacerun: yes">&nbsp; </span>-12.34e-56<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.align<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.skip<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>1000<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.data<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.text<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.bss<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.export<span style="mso-spacerun: yes">&nbsp; </span>MyLabel<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>.import<span style="mso-spacerun: yes">&nbsp; </span>ForeignProc<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;font-family:Courier'><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>ELT_SIZE = 120<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Alignment<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Like many computers, the BLITZrequires data to lie on aligned memory addresses.<span style="mso-spacerun:yes">&nbsp; </span>The BLITZ requires 32-bit alignment for word-sizedquantities.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Real computers, like the SunSPARC, have additional 16-bit and 64-bit alignment requirements for someinstructions.<span style="mso-spacerun: yes">&nbsp; </span>This exemplifies howthe BLITZ architecture is designed to capture many details of real CPUarchitectures, while at the same time being somewhat simpler to avoid many ofthe technical complexities that can make programming real CPUs quite difficult.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The Stack Pointer<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In the BLITZ architecture,register “r15” points to the execution stack, which grows downward from highermemory addresses toward lower addresses.<span style="mso-spacerun: yes">&nbsp;</span>Since there are two sets of the general purpose registers (one forsystem mode and one for user mode), there is a distinction between a process’ssystem stack and its user stack.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Interrupt Processing<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU accepts asynchronousinterrupts from the following hardware and external sources:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Timer<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Disk<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Serial Terminal<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Power-on Reset<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Hardware Fault<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU also processes programexceptions arising from the following causes:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Address Exception<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Alignment Exception<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Arithmetic Exception<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Privileged Instruction<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Illegal Instruction<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp; </span><span style="mso-spacerun:yes">&nbsp;&nbsp;</span>Page Fault (invalid page)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Fault (update toread-only page)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Syscall Trap Instruction<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'>The timer interrupt is generatedregularly at a fixed periodic rate.<span style="mso-spacerun: yes">&nbsp;</span>It provides the necessary “clock tick” needed for a number of OSfunctions, such as time-slicing.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Some of the interrupts may bemasked while others cannot be.<span style="mso-spacerun: yes">&nbsp; </span>Forexample, the timer interrupt may be masked, which is useful in preventing acontext switch while the OS kernel is updating data in a critical section ofcode.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>When an interrupt occurs, the CPUwill switch from user mode into system mode, disable interrupts, turn offpaging, and push three words onto the system stack.<span style="mso-spacerun:yes">&nbsp; </span>The words pushed onto the stack are:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Program Counter<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Status Register<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page number causing problem(for page faults only)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The lowest 56 bytes of memorycontain an interrupt vector, comprised of one 4 byte word per interrupttype.<span style="mso-spacerun: yes">&nbsp; </span>When an interrupt occurs,the interrupt vector is consulted and a jump is made to the interrupt handlerroutine.<span style="mso-spacerun: yes">&nbsp; </span>There is a separateinterrupt handler for each type of interrupt.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>All interrupts are precise in thesense that the OS can simply execute a return-from-interrupt instruction(“reti”) to return to the user-level program and restart the offendinginstruction.<span style="mso-spacerun: yes">&nbsp; </span>Since there is nopipelining or super-scalar execution, the OS does not need to do any work torestart interrupted execution after a page fault.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The Page Table<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU includes a MMU (MemoryManagement Unit) to support paging and virtual memory.<spanstyle="mso-spacerun: yes">&nbsp; </span>The page size is 8K bytes.<spanstyle="mso-spacerun: yes">&nbsp; </span>A page table can accommodate up to 2Kpages, allowing each virtual address space to be up to 16M bytes.<spanstyle="mso-spacerun: yes">&nbsp; </span>Each virtual address is therefore 24bits, which are divided into an 11 bit page number and a 13 bit offset.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In a typical student OS project,physical memory is set to 16 MB (2K frames) and a typical virtual address spaceis 20 pages (160 KB).<span style="mso-spacerun: yes">&nbsp; </span>However,physical memory can be as large as 4G bytes (512K frames).</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Each entry in the page tablecontains:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Frame Address inPhysical Memory (19 bits)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Valid Bit<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(0 = page notin memory)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Writable Bit<spanstyle="mso-spacerun: yes">&nbsp;&nbsp; </span>(0 = page is read-only)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Dirty Bit<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(0 = page hasnot been modified)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Referenced Bit (0 = pagehas not been accessed)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Unused (9 bits, can be usedby the OS as needed)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU contains two registerswhich together describe the current page table:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Table Base Register(PTBR)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Page Table Length Register(PTLR)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Paging is either turned on or isdisabled, as determined by a bit in the CPU status register.<spanstyle="mso-spacerun: yes">&nbsp; </span>When paging is enabled, all addressesgo through page table translation.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The “Valid Bit” is checked and apage fault is generated whenever a user program attempts to use an address notin its virtual address space.<span style="mso-spacerun: yes">&nbsp; </span>The“Writable Bit” is checked and a page fault occurs whenever a user program triesto modify a read-only page.<span style="mso-spacerun: yes">&nbsp; </span>TheMMU will set the “Dirty Bit” whenever a page is modified and will set the“Referenced Bit” whenever a page is read or modified.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The Disk<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ emulator simulates adisk.<span style="mso-spacerun: yes">&nbsp; </span>The disk is divided into anumber of tracks and sectors.<span style="mso-spacerun: yes">&nbsp; </span>Disksectors have the same size as page frames, namely 8K bytes.<spanstyle="mso-spacerun: yes">&nbsp; </span>Each track on the disk contains 16sectors and the number of tracks on the disk is one of the simulationparameters to the emulator.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The disk is simulated with a Unixfile.<span style="mso-spacerun: yes">&nbsp; </span>A disk read will thereforeget data from the Unix file and disk writes will update the file.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The disk operates asynchronously:the software must start the disk operation and later, after the I/O completes,the CPU will receive an interrupt.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The disk is operated by movingcontrol words to and from several registers in the disk device controller.<spanstyle="mso-spacerun: yes">&nbsp; </span>For example, to start a disk read, theOS must (1) move the desired sector number into one device register, (2) movethe target memory address to another device register, (3) move the number ofsectors to be read into a third device register, and finally (4) move the“read” command into a fourth device register.<span style="mso-spacerun:yes">&nbsp; </span>After the interrupt signals completion of the disk read, theOS can examine a device status register to see whether the operation completedwithout error.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The device registers are mappedinto high memory addresses.<span style="mso-spacerun: yes">&nbsp; </span>Toload a device register, the OS simply stores a value into a fixed,predetermined memory location.<span style="mso-spacerun: yes">&nbsp; </span>Thismakes it possible to control the disk completely within the high-level language(i.e., from KPL code); no assembly programming is needed.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The transfer of a block of databytes occurs through direct memory access (DMA).</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ emulator simulates diskI/O delays accurately, modeling rotational delays, seek times, settle times,transfer times, current rotational angle and current head position.<spanstyle="mso-spacerun: yes">&nbsp; </span>The simulation constants can bemodified and random variations are also modeled.<span style="mso-spacerun:yes">&nbsp; </span>The emulator also simulates randomly occurring transientread and write errors.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The Serial Terminal Device<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ computer also simulatesa serial terminal device.<span style="mso-spacerun: yes">&nbsp; </span>Theemulator models a Universal Asynchronous Receive Transmit (UART) chip, such aswould be used to interface to a modem or dumb terminal.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The serial terminal interfaceallows the CPU to send and receive individual ASCII charactersasynchronously.<span style="mso-spacerun: yes">&nbsp; </span>Only one charactermay be sent at a time and each character is received one at a time.<spanstyle="mso-spacerun: yes">&nbsp; </span>The serial device is “full duplex,”which means that the send and receive channels are independent, so the devicecan be sending and receiving simultaneously.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>To send a character, the OSsoftware must load a device register with the character to transmit.<spanstyle="mso-spacerun: yes">&nbsp; </span>After the transmission is complete andthe device is ready for another character, the CPU will receive an interrupt.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>To receive a character, the OSmust wait until a character appears on the input.<span style="mso-spacerun:yes">&nbsp; </span>When a character appears, the CPU will receive aninterrupt.<span style="mso-spacerun: yes">&nbsp; </span>The character can beretrieved by reading a device register.<span style="mso-spacerun: yes">&nbsp;</span>All device registers are memory-mapped to predefined addresses in highmemory.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The emulator simulates the serialdevice by sending characters directly to the Unix “stdout,” which generallymeans that when the BLITZ OS kernel sends a character, it will appear on thestudent’s screen.<span style="mso-spacerun: yes">&nbsp; </span>Likewise, whenthe student types a character, the emulator will arrange for the BLITZ CPU tobe interrupted to indicate that a byte is ready to be received from the UARTinterface.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>For automated testing of studentOS code, the serial I/O may also be redirected.<span style="mso-spacerun:yes">&nbsp; </span>If serial input is coming from a file, the emulatorsimulates a reasonable human typing speed by providing the interrupts associatedwith incoming characters at a predetermined, rather slow rate.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Nondeterminism and Debugging <o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ emulator simulates annumber of probabilistic events using a pseudo-random number generator.<spanstyle="mso-spacerun: yes">&nbsp; </span>For example, the likelihood of atransient disk error and a slight random variation in the arrival of timerinterrupts are simulated using random numbers.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Programs that are sensitive toexternal events and behave slightly differently on each run can be difficult todebug, since a bug may be timing dependent and not easily reproducible.<spanstyle="mso-spacerun: yes">&nbsp; </span>Operating systems certainly fall intothis category.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>To facilitate testing, theemulator takes, as a command line option, an initial seed for its random numbergenerator.<span style="mso-spacerun: yes">&nbsp; </span>By supplying the samerandom number seed, students can rerun their programs and always get the exactsame output.<span style="mso-spacerun: yes">&nbsp; </span>When supplying adifferent random number seed, the same program may produce a different output,due to race conditions, timing dependencies, etc.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:20.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><h2><span style='font-size:20.0pt'>What is Missing from the BLITZ Hardware<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The following features are foundin real CPU architectures, but have not been included in the BLITZ hardwarearchitecture.<span style="mso-spacerun: yes">&nbsp; </span>These features addcomplexity to the job of creating an operating system, yet their inclusionwould not substantially change the nature of the OS or contribute to a deeperunderstanding of the relevant concepts and issues.<span style="mso-spacerun:yes">&nbsp; </span>Including these features would make the students’ job ofcreating a kernel more difficult, without giving the students anything morethan an appreciation of how difficult and complex a real OS can be.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Pipelinedinstruction execution</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Superscalar or out-of-order instruction execution</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Instruction or data caches</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Interrupts that save internal (hidden) CPU registers</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Translation lookaside buffers (TLBs)</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Graphicalinterface devices, such as a bitmapped screen, keyboard, and mouse</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Other I/Odevices, including multiple disks, CD-ROMs, etc.</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Complexities of real disk drives and device drivers</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Networking capability</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Multipleinterrupt levels (BLITZ supports only “enabled” and “disabled”)</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Registerwindows, such as on the Sun SPARC</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Otherdata types, such as half-word integers and single or quad precisionfloating-point</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>•&nbsp;Additional alignment restrictions</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Moredetailed instruction sets, with more opcodes</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>• &nbsp;Supportfor multiple CPUs</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>One might reasonably ask why theBLITZ architecture does not include Translation Lookaside Buffers (TLBs)instead of page tables, since TLBs are a great idea, yet they impact the OSdesign significantly.<span style="mso-spacerun: yes">&nbsp; </span>My answer isthat implementing virtual memories is hard enough with page tables and thestudent OS project would be made overly complex by the inclusion of TLBs.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In retrospect, the inclusion offloating point in the BLITZ architecture seems unnecessary, since an OS willnot normally perform any floating-point computation.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Networking capability issomething that might be useful and may be added in the future.<spanstyle="mso-spacerun: yes">&nbsp; </span>However, in a single term or semestercourse, very few students will have time to add something like TCP/IP supportto the operating system kernels they construct.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p></div></body></html>