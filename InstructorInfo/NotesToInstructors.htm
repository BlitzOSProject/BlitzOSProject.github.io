<html xmlns:v="urn:schemas-microsoft-com:vml"xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Notes to instructors"><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="NotesToInstructors_files/filelist.xml"><title>Notes to instructors</title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Harry Porter</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Harry Porter</o:LastAuthor>  <o:Revision>2</o:Revision>  <o:LastPrinted>2007-09-19T23:43:00Z</o:LastPrinted>  <o:Created>2007-09-19T23:43:00Z</o:Created>  <o:LastSaved>2007-09-19T23:43:00Z</o:LastSaved>  <o:Pages>9</o:Pages>  <o:Words>3231</o:Words>  <o:Characters>18422</o:Characters>  <o:Lines>153</o:Lines>  <o:Paragraphs>36</o:Paragraphs>  <o:CharactersWithSpaces>22623</o:CharactersWithSpaces>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:ActiveWritingStyle Lang="EN-US" VendorID="6" DLLVersion="2" NLCheck="0">1</w:ActiveWritingStyle>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--><style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}h1	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:1;	font-size:18.0pt;	font-family:Times;	mso-font-kerning:0pt;	text-decoration:underline;	text-underline:single;}h2	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:2;	font-size:12.0pt;	font-family:Times;}p.MsoHeader, li.MsoHeader, div.MsoHeader	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoFooter, li.MsoFooter, div.MsoFooter	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:Times;}@page Section1	{size:8.5in 11.0in;	margin:1.0in .75in 1.0in .75in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-header:url(":NotesToInstructors_files:header.htm") h1;	mso-footer:url(":NotesToInstructors_files:header.htm") f1;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style><!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="2050"/></xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit">  <o:idmap v:ext="edit" data="1"/> </o:shapelayout></xml><![endif]--></head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:28.0pt'><b>Notes to Instructors<o:p></o:p></b></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:28.0pt'><b>Concerning the BLITZ Projects<o:p></o:p></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i>Harry H. Porter III, Ph.D.<o:p></o:p></i></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i>Department of Computer Science<o:p></o:p></i></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i>Portland State University<o:p></o:p></i></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></i></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i>April 14, 2006<o:p></o:p></i></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:18.0pt'><i>Revised: September 17, 2007<o:p></o:p></i></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h1>Overview</h1><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The BLITZ System includes 8 student programming projects,which you may assign to your students.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The projects are all pieces of a puzzle that, when fullyassembled, will be an OS kernel for the BLITZ machine.<spanstyle="mso-spacerun: yes">&nbsp; </span>Many of the pieces of the kernel areprovided by us, yet the student will be required to add critical pieces andfully understand all the code.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The kernel that students will build is a simplified versionof Unix and will have these features:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Multiple user-level processes</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Virtual memory using page tables</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>A file system (on a simulated disk),containing user-level programs and other files</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>A terminal, via which a user cancommunicate with a shell program</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>System calls (including <i>Fork</i><spanstyle='font-style:normal'>, </span><i>Join</i><span style='font-style:normal'>,</span><i>Exec</i><span style='font-style:normal'>, </span><i>Exit</i><spanstyle='font-style:normal'>, </span><i>Open</i><span style='font-style:normal'>,</span><i>Close</i><span style='font-style:normal'>, </span><i>Read</i><spanstyle='font-style:normal'>, </span><i>Write</i><span style='font-style:normal'>,</span><i>Seek</i><span style='font-style:normal'>)</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>By the final project, students will be able to execute asimplified “shell” program, which invokes “fork” and “exec” system calls toexecute other programs, and even a sub-shell.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>All projects come with the following:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>An assignment document (both in MSWordand PDF formats)</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>A directory with all necessary files</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In addition, some projects have:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='margin-left:27.0pt;text-indent:-9.0pt;tab-stops:.5in'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Example output</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Solution code</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>PowerPoint slides, for class discussion</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Grading forms, to facilitate grading</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>A lot of code is provided by us, but the students will writekey portions and will need to read over and understand the entire kernel inorder to fit the pieces together.<span style="mso-spacerun: yes">&nbsp;</span>The code we provide is given to the students a little bit at a time,over the 8 projects, rather than all at once, so that they can understand itincrementally.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The projects are designed so they can be assigned as is; youcan simply refer your students to the BLITZ website.<span style="mso-spacerun:yes">&nbsp; </span>On the other hand, you are also free to edit the assignmentdocuments any way you want.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Each project is intended to take one week to complete, withthe first project being assigned at the first class meeting.<spanstyle="mso-spacerun: yes">&nbsp; </span>Of course, you'll need to let yourstudents know exactly what day you want each project completed.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>For a 10 week term, the approach of eight assignments, ofone week each, will leave a little time at the end of the term for extensions,etc.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Although many of my students are able to complete all 8projects in a 10 week term, this is clearly an ambitious undertaking for somestudents.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The assignment documents are rather lengthy, but aredesigned to include as much information as necessary to complete theprojects.<span style="mso-spacerun: yes">&nbsp; </span>The idea is to err onthe side of providing too much information, rather than too little.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Each project is broken into several tasks.<spanstyle="mso-spacerun: yes">&nbsp; </span>Each task serves a specific purpose andthe intent is for all tasks to be assigned and completed, including those tasksin the early projects that don’t seem to relate directly to building an OSkernel.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>If you want to reduce the amount of programming required, Isuggest you</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Extend the course from one term to twoterms and double the project durations</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Eliminate the last one or two projects</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>I do not recommend simplifying or eliminating parts theprojects, but you are certainly free to use this material in any way youwant.<span style="mso-spacerun: yes">&nbsp; </span>For example, you might takea completed version of the entire kernel (i.e., all 8 projects) and just giveit to students to read and study.<br style='mso-special-character:line-break'><![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'><![endif]></p><p class=MsoNormal><u>What Students Hand In:</u><span style="mso-spacerun:yes">&nbsp; </span>Each project instructs the students to print the code theywrite and to print the output from running their code.<spanstyle="mso-spacerun: yes">&nbsp; </span>They are asked to hand in hardcopy ofthe code and its output.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Required Prerequisites:</u><span style="mso-spacerun:yes">&nbsp; </span>Students are assumed to already know:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='margin-left:27.0pt;text-indent:-9.0pt;tab-stops:.5in'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>How to use the Unix shell</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>How to edit text files</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>How to download files (e.g., ftp)</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>How to print files</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Assembly language programming</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>No knowledge of any specific machine architecture isassumed, but familiarity with some real CPU architecture is assumed.<spanstyle="mso-spacerun: yes">&nbsp; </span>The BLITZ system includes some assemblycode.<span style="mso-spacerun: yes">&nbsp; </span>The students are encouragedto look over it, but are not required to write any assembly code.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Students will be writing code.<span style="mso-spacerun:yes">&nbsp; </span>No knowledge of any specific programming language isassumed, although knowledge of “C” or “C++” is most appropriate.<spanstyle="mso-spacerun: yes">&nbsp; </span>A language called KPL is used for theBLITZ projects.<span style="mso-spacerun: yes">&nbsp; </span>The first fewprojects are designed to introduce and teach KPL.<span style="mso-spacerun:yes">&nbsp; </span>Of course there is a learning curve for KPL, but experiencehas shown it is not a great barrier.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The language used in these projects, which is called KPL,was designed specifically for the BLITZ project.<span style="mso-spacerun:yes">&nbsp; </span>KPL is similar in capabilities to C++.<spanstyle="mso-spacerun: yes">&nbsp; </span>It has pointers, arrays, classes,methods, interfaces, pointers to functions, the same expression syntax, and theability to link with assembly routines.<span style="mso-spacerun: yes">&nbsp;</span>The syntax (which happens to be LL(1)) was designed to increase thereadability of the code, and students will spend more time reading the codethan writing it.<span style="mso-spacerun: yes">&nbsp; </span>The errorreporting is quite thorough, which really helps student debugging.<spanstyle="mso-spacerun: yes">&nbsp; </span>For example, null pointers and array-out-of-boundsare checked for and reported.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Class Organization Thoughts:</u><spanstyle="mso-spacerun: yes">&nbsp; </span>My preference is to encourage studentsto work together&#8212;e.g., look at each other’s code and even help withdebugging&#8212;but to require each student to hand in a solution.<spanstyle="mso-spacerun: yes">&nbsp; </span>I ask each student to write his/her owncode, not to simply copy someone else’s code.<span style="mso-spacerun:yes">&nbsp; </span>A reasonable alternative is to make this a group project.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>I also create an email mailing list for my class.<spanstyle="mso-spacerun: yes">&nbsp; </span>I require all students to subscribe andencourage students to post questions and answers to it.<spanstyle="mso-spacerun: yes">&nbsp; </span>There is a lot of BLITZ documentation,and in my experience, most questions will be answered by other students who gotthe answers from a more careful reading of the documentation.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Managing the Documentation:</u><span style="mso-spacerun:yes">&nbsp; </span>The BLITZ documentation is available online as PDFfiles.<span style="mso-spacerun: yes">&nbsp; </span>One possibility is for youto print all the material, deliver it to your local copy shop, and suggest thatstudents purchase a pre-printed, bound copy of everything.<spanstyle="mso-spacerun: yes">&nbsp; </span>I strongly recommend that my studentspurchase the packet from the copy shop, but if they want to print itthemselves, I recommend they print everything at once and then put it all in asingle binder.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>I, as copyright holder, hereby grant permission to freelycopy and distribute the BLITZ material.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Additional Support Information:</u><spanstyle="mso-spacerun: yes">&nbsp; </span>Additional files, such as blank“grading forms” and PowerPoint slides, can be found in the directory</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><spanstyle='font-family:Courier'>www.cecs.pdx.edu/~harry/Blitz/InstructorInfo/<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:18.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 1: Intro. tothe BLITZ Tools<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 13 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Make sure the students can execute the BLITZsoftware tools; Make sure students realize the course has a programmingcomponent; Allow time for students to obtain computer accounts, if necessary;Allow time for the lectures to introduce important concepts before anysubstantive challenges are issued.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project should be assigned at the first class meeting.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This is a warm-up project, which requires the students toperform the following steps:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Print and begin reading the BLITZdocumentation</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Make the tools usable</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Demonstrate the BLITZ framework forfuture projects</p><p class=MsoHeader style='margin-left:27.0pt;text-indent:-9.0pt;tab-stops:.5in'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Startup the BLITZ virtual machineemulator</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Compile, assemble, and execute some demoprograms</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Examine some assembly code and some KPLcode</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Practice a few commands in the debugger</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This assignment is not difficult.<span style="mso-spacerun:yes">&nbsp; </span>There is a script and the students simply follow each stepin turn.<span style="mso-spacerun: yes">&nbsp; </span>This project verifies thestudents have familiarity with the necessary Unix tools.<spanstyle="mso-spacerun: yes">&nbsp; </span>No OS-specific knowledge is needed tocomplete this project.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project should be graded pass-fail and should take 1 or2 hours.<span style="mso-spacerun: yes">&nbsp; </span>The only reason to failis that the student didn’t do it or lacks the prerequisite knowledge.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 2: Threads andInterprocess Communication<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 11 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Start to learn the KPL language; Learn aboutthreads (ready-list, idle process, thread switching, thread status, round-robinscheduling) and functions like <i>sleep</i><span style='font-style:normal'> and</span><i>yield</i><span style='font-style:normal'>; Learn about interprocesscommunication (</span><i>semaphores</i><span style='font-style:normal'>, </span><i>mutexlocks</i><span style='font-style:normal'>, and </span><i>monitors</i><spanstyle='font-style:normal'>); Confront two classic IPC exercises (</span><i>Producer-Consumer</i><spanstyle='font-style:normal'> and </span><i>Dining Philosophers</i><spanstyle='font-style:normal'>); Provide motivation to understand the monitorconcept.</span></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In this project, students will mostly read code.<spanstyle="mso-spacerun: yes">&nbsp; </span>They will begin to use KPL by fillingin the bodies of some methods.<span style="mso-spacerun: yes">&nbsp;</span>Little design freedom is given and much of the code can be written byanalogy with existing code, which they will need to study.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In this project, we give the students a completelyfunctional round-robin thread scheduler, an implementation of <i>semaphores</i><spanstyle='font-style:normal'> and an implementation of </span><i>conditionvariables</i><span style='font-style:normal'>.<span style="mso-spacerun:yes">&nbsp; </span>The project is divided into these tasks:</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Examine existing code, looking at thethread scheduler, the implementations of <i>fork</i><span style='font-style:normal'>, </span><i>yield</i><span style='font-style:normal'> and </span><i>sleep</i><spanstyle='font-style:normal'> and sample multi-threaded code that uses thesefunctions</span></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Perform several experiments with thisexisting code to understand thread switching</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement <i>mutex locks</i><spanstyle='font-style:normal'> (using the technique of disabling interrupts,invoking </span><i>sleep</i><span style='font-style:normal'>, and movingthreads onto the ready-list)</span></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement a <i>Producer-Consumer</i><spanstyle='font-style:normal'> solution using semaphores</span></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement a <i>Dining Philosophers</i><spanstyle='font-style:normal'> solution using monitors</span></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>By implementing mutex locks, students are encouraged to lookat and understand how semaphores are implemented.<span style="mso-spacerun:yes">&nbsp; </span>Their implementation of mutex locks will be needed lateron.<span style="mso-spacerun: yes">&nbsp; </span>[As part of project 3, twoimplementations of mutex are distributed (one which disables interrupts and onewhich uses semaphores) in case the student was unable to complete this step.]</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In the Producer-Consumer task, students are asked toimplement a solution to the bounded-buffer producer-consumer problem withseveral producer and several consumer threads.<span style="mso-spacerun:yes">&nbsp; </span>A solution is given in the Tanenbaum textbook and thestudents are asked to recode this in KPL.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In the Dining Philosophers task, students are asked toimplement a solution to the Dining Philosophers task using the monitorconstruct.<span style="mso-spacerun: yes">&nbsp; </span>This task is muchharder.<span style="mso-spacerun: yes">&nbsp; </span>The Tanenbaum textcontains a solution using mutexes and semaphores and it is fairlystraightforward to re-code this in KPL.<span style="mso-spacerun: yes">&nbsp;</span>However, the students are asked to use monitors in their solution.<spanstyle="mso-spacerun: yes">&nbsp; </span>At this point, students are stillgrappling with threads, mutex locks and semaphores so the monitor concept isoverly challenging.<span style="mso-spacerun: yes">&nbsp; </span>Nonetheless,this difficult task gets the students to play close attention to the solution,which should be discussed in class.<span style="mso-spacerun: yes">&nbsp;</span>In later projects, they will need to implement monitors (e.g., to managepage frames), so this is the first step is really about understanding theimportance of the monitor concept.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>We provide PowerPoint slides giving a solution to the DiningPhilosophers task, which should be covered in lecture after the assignment iscollected.<span style="mso-spacerun: yes">&nbsp; </span>The solution to themutex problem is distributed with the code for the next project, since it iscritical that mutex locks are implemented correctly.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>A testing framework for mutexes, Producer-Consumer andDining Philosophers is included.<span style="mso-spacerun: yes">&nbsp;</span>We also provide sample output (as a PDF file) showing students whatcorrect output looks like, which may help in grading.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Coordination with lectures:</u><span style="mso-spacerun:yes">&nbsp; </span>This project is intended to be given at the beginning of thesecond week of class and due at the beginning of the third week.<spanstyle="mso-spacerun: yes">&nbsp; </span>In order to give students enoughinformation to complete this project on this schedule, the lectures must coverthe following topics within the first two weeks:<span style="mso-spacerun:yes">&nbsp; </span>Concurrency and threads, ready/running/blocked, raceconditions, critical sections, mutual exclusion, mutex locks, semaphores (bothsemantics and implementation), a producer-consumer solution using semaphores,discussion of the dining philosopher scenario, monitors and conditionvariables.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In my class, I cover all this by the end of the second week,and then give students the weekend to complete the project.<spanstyle="mso-spacerun: yes">&nbsp; </span>In actuality, most students don’t fullygrasp monitors or condition variables, but are really primed for looking at thesolution code for Dining Philosophers at the beginning of the third week.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 3: Barbers andGamblers<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 6 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Reinforce the concepts related to multi-threadsynchronization: mutexes, semaphores, condition variables and monitors; Gainadditional proficiency in KPL and learn to create entire classes from scratch.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project is divided into two tasks:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement a solution to the <i>SleepingBarber</i><span style='font-style:normal'> IPC problem</span></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement a solution to the <i>GamingParlor</i><span style='font-style:normal'> IPC problem, using a monitor</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Students will use the same thread scheduler as the previousproject and really start to understand the concepts introduced in the previousproject.<span style="mso-spacerun: yes">&nbsp; </span>This time the studentsare not given any portion of the solution.<span style="mso-spacerun:yes">&nbsp; </span>They will need to create new classes and new threads ontheir own.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The Tanenbaum text provides a solution to the SleepingBarber problem, which the students must translate into KPL.<spanstyle="mso-spacerun: yes">&nbsp; </span>The Tanenbaum text does not discuss theGaming Parlor problem.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>As part of the assignment, we provide sample output anddiscuss how the students might structure their output.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>We also provide a solution to the Gaming Parlor task (asPowerPoint slides), which should be covered in lecture after the assignment iscollected.<span style="mso-spacerun: yes">&nbsp; </span>No solution code forthe Sleeping Barber task is provided.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>We should note that the Gaming Parlor monitor is very closeto what the students will need for the next project, in particular the“FrameManager.”<span style="mso-spacerun: yes">&nbsp; </span>After working onthe previous problems (Producers-Consumers, Dining Philosophers and Sleeping Barbers),some students will be in a position to complete the Gaming Parlor tasksuccessfully.<span style="mso-spacerun: yes">&nbsp; </span>But more importantlyfor the ongoing project, most students should be ready after the Gaming Parlorto correctly implement the monitors needed to manage kernel resources (e.g.,process-control-blocks and memory-frames) in the next project.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:18.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 4: KernelResource Management<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 17 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u><span style="mso-spacerun: yes">&nbsp;</span>Cement the concepts of thread synchronization, including mutex locks,semaphores, condition variables, and monitors; Introduce concepts like processcontrol block and page frames; Create three monitors which will be used tomanage kernel resources; Explore the differences between Hoare semantics andMesa semantics for monitor condition variables.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project is divided into these tasks:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Create a monitor to manage the Threadobjects</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Create a monitor to manage the Processobjects</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Create a monitor to manage the Frames</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement Hoare semantics for monitorcondition variables</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Each thread in our OS will be represented by an object ofclass “Thread.”<span style="mso-spacerun: yes">&nbsp; </span>These objects area limited kernel resource which will be managed by a monitor called“ThreadManager.”</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Likewise, each process will be represented by an object ofthe “ProcessControlBlock” class.<span style="mso-spacerun: yes">&nbsp;</span>The ProcessControlBlocks are also kernel resources which will be managedby a monitor called “ProcessManager.”</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Physical memory will be divided into frames and eachuser-level process will require a virtual address space made of pages.<spanstyle="mso-spacerun: yes">&nbsp; </span>Each page will be stored in aframe.<span style="mso-spacerun: yes">&nbsp; </span>The frames are a criticalresource which will be managed by a monitor called “FrameManager.”</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The last task of this project&#8212;to implement “HoareSemantics” for condition variables&#8212;is not strictly necessary and isincluded as an additional challenge for the better students.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>We are including code to test the first three tasks, butstudents are asked to figure out how to test the last task.<spanstyle="mso-spacerun: yes">&nbsp; </span>Since the first three tasks arecritical to the ongoing project, our testing code really hammers on thesemonitors in an attempt to break them.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Nothing prevents students from extracting the sample outputfrom the PDF files we are distributing and simply submitting that.<spanstyle="mso-spacerun: yes">&nbsp; </span>However, since the thread switchingshould be occurring at random times, each students’ output should differslightly.<span style="mso-spacerun: yes">&nbsp; </span>Anyone who hands inoutput that exactly matches the given output has some explaining to do.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:18.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 5: User-LevelProcesses<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 34 pages (including 2 pages of sampleoutput)</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Implement a single user-level process runningin its own address space; Introduce system calls and the distinction betweenkernel and user code; Introduce the page table hardware; Introduce the DISK andits device driver and the file system connections.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project is divided into these tasks:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Get a user-level process running</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Setup the system-call interface</p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement system call <i>Exec</i></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The operating system we are creating will implement thesesystem calls (although only <i>Exec</i><span style='font-style:normal'> will beimplemented in this project).</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Exit<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Shutdown<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Yield<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Fork<o:p></o:p></b></p><p class=MsoFooter style='tab-stops:.5in'><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Join<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Exec<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Create<o:p></o:p></b></p><h2><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Open</h2><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Read<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Write<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Seek<o:p></o:p></b></p><p class=MsoNormal><b><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Close<o:p></o:p></b></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In this project we supply code for a minimal file system,using the (emulated) disk.<span style="mso-spacerun: yes">&nbsp; </span>Theuser-level programs are written in KPL and compiled on the host platform, justlike the kernel itself, and we provide a utility to initialize the emulateddisk and copy files from the host to the emulated disk and vice versa.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In the second task, students will put together the systemcall interface.<span style="mso-spacerun: yes">&nbsp; </span>Although each syscallis an unimplemented stub in the kernel, this step assures that the user-levelcode can invoke kernel functions.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In the last task, students implement the <i>Exec</i><spanstyle='font-style:normal'> kernel routine, which will read a new executableprogram from disk and copy it into the address space of the process whichinvoked the </span><i>Exec</i><span style='font-style:normal'> and then beginexecuting it.<span style="mso-spacerun: yes">&nbsp; </span>This task requiresthe students to understand the virtual memory software and the file systemsoftware.</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Students are given just enough of the file system to achievethe task without having to modify the file system code; the remainder of thefile system will be addressed in Project 7.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The simulated disk will contain some user-level testprograms we supply.<span style="mso-spacerun: yes">&nbsp; </span>The studentsare instructed to run these tests and hand in the results.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 6:Multiprogramming With Fork<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 21 pages (including 6 pages of sampleoutput)</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Implement the following system calls: <i>Fork</i><spanstyle='font-style:normal'>, </span><i>Join</i><span style='font-style:normal'>, </span><i>Exit</i><span style='font-style:normal'> and </span><i>Yield</i><spanstyle='font-style:normal'>; Gain additional familiarity with the system callinterface and with the semantics of these system calls; Understand theparent-child relationship between processes; Understand multiprogramming;Understand simple synchronization between Unix processes using </span><i>Exit</i><spanstyle='font-style:normal'> and </span><i>Join</i><span style='font-style:normal'>;Understand the complexities of managing shared kernel resources.</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project is divided into two tasks:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement <i>Fork</i></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span>Implement <i>Join</i><spanstyle='font-style:normal'>, </span><i>Exit</i><span style='font-style:normal'>and </span><i>Yield</i></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In order to implement <i>Fork</i><span style='font-style:normal'>, the students will have to look more carefully at exactly how thesystem call interface works.<span style="mso-spacerun: yes">&nbsp; </span>Thereare also a number of deadlock and race conditions that must be avoided.</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The simulated disk will contain some user-level testprograms we supply.<span style="mso-spacerun: yes">&nbsp; </span>The studentsare instructed to run these tests and hand in the results.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 7: File-RelatedSyscalls<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 8 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Implement and understand the following systemcalls: <i>Open</i><span style='font-style:normal'>, </span><i>Read</i><spanstyle='font-style:normal'>, </span><i>Write</i><span style='font-style:normal'>,</span><i>Seek</i><span style='font-style:normal'> and </span><i>Close</i><spanstyle='font-style:normal'>; Understand the Unix file model; Understand how thekernel buffers information between the disk and processes.</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This project asks students to implement these system calls:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:12.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><br clear=ALL style='page-break-before:always'></span><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span><i>Open</i></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span><i>Read</i></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span><i>Write</i></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span><i>Seek</i></p><p class=MsoNormal style='margin-left:27.0pt;text-indent:-9.0pt'>•<spanstyle='mso-tab-count:1'>&nbsp; </span><i>Close</i></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The simulated disk will contain some user-level testprograms we supply.<span style="mso-spacerun: yes">&nbsp; </span>The studentsare instructed to run these tests and hand in the results.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Sample output is provided in a separate file called <b>DesiredOutput.pdf</b><spanstyle='font-weight:normal'>.</span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Project 8: The SerialI/O Device Driver<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Duration:</u> 1 week</p><p class=MsoNormal><u>Document size:</u> 16 pages</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><u>Goals:</u> Implement a device driver for a serialcharacter-oriented terminal; Integrate the new device into the file systemsyscalls; Understand the difference between block and character devices;Understand and execute a shell program.</p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'>This project asks the students toimplement a device driver for a serial ASCII terminal and integrate it into theexisting system call interface (e.g., <i>Open</i><span style='font-style:normal'>,</span><i>Read</i><span style='font-style:normal'>, </span><i>Write</i><spanstyle='font-style:normal'>, etc.)<span style="mso-spacerun: yes">&nbsp;</span>This will allow the user to communicate directly with user-levelprograms by providing a “stdin” and “stdout” for file system calls to use.</span></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'>With the completion of this project,everything is in place for a “shell” program and a simple shell program isprovided by us.<span style="mso-spacerun: yes">&nbsp; </span>This shell iscapable of executing commands and of redirecting the stdin/stdout from theterminal to files, using the Unix &lt; and &gt; redirection operators.<spanstyle="mso-spacerun: yes">&nbsp; </span>We also provide a program called “cat,”which is essentially the Unix “cat” command, and some other files.<spanstyle="mso-spacerun: yes">&nbsp; </span>The shell is (naturally!) capable ofexecuting script files by recursively invoking itself recursively with I/Oredirection.</p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'>As an extension, we mention that thestudents might consider implementing “pipes,” but aside from some minimaldiscussion, no further code is provided.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The simulated disk will contain some user-level testprograms we supply.<span style="mso-spacerun: yes">&nbsp; </span>The studentsare instructed to run these tests and hand in the results.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Sample output is provided in a separate file called <b>DesiredOutput.pdf</b><spanstyle='font-weight:normal'>.</span></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:18.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><p class=MsoNormal><span style='font-size:18.0pt'><b><u>Extensions / AdditionalProject Ideas<o:p></o:p></u></b></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Adding Unix “pipes,” as discussed in project 8, mightconstitute a separate project.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In our kernel, each process has exactly one thread.<spanstyle="mso-spacerun: yes">&nbsp; </span>This could be generalized to allow eachprocess to have more than one thread, opening up some design choices about whatsort of concurrency control primitives the kernel ought to provide.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The file system used in this project is prettyrudimentary.<span style="mso-spacerun: yes">&nbsp; </span>For example, newfiles may not be created.<span style="mso-spacerun: yes">&nbsp; </span>(Allfiles are placed on the disk by a BLITZ utility before the kernel begins.)<spanstyle="mso-spacerun: yes">&nbsp; </span>Files may not be enlarged and areallocated in contiguous sectors.<span style="mso-spacerun: yes">&nbsp;</span>There is only a single-level directory.<span style="mso-spacerun:yes">&nbsp; </span>All of this could be improved.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>There is no concept of security or userids, and this couldbe added.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The kernel implements virtual memory using the page tablesand a process’s address space may be scattered all over physical memory.<spanstyle="mso-spacerun: yes">&nbsp; </span>However there is no swapping of pagesout to disk: all<span style="mso-spacerun: yes">&nbsp; </span>the pages of anaddress space must fit into memory.<span style="mso-spacerun: yes">&nbsp;</span>Paging to disk could be added.</p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'>In this kernel, address spaces arecopied during <i>Fork</i><span style='font-style:normal'>.<spanstyle="mso-spacerun: yes">&nbsp; </span>Another idea is to add the ability toshare pages between processes and/or copy-on-write semantics.</span></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'>As another idea, it would beinteresting to implement the kernel calls needed in a message-passing kernellike Mach.</p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p></div></body></html>