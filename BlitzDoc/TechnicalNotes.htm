<html xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Technical Notes"><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="TechnicalNotes_files/filelist.xml"><title>Technical Notes</title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Harry H. Porter III</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Harry Porter</o:LastAuthor>  <o:Revision>2</o:Revision>  <o:LastPrinted>2007-09-19T20:44:00Z</o:LastPrinted>  <o:Created>2007-09-19T20:45:00Z</o:Created>  <o:LastSaved>2007-09-19T20:45:00Z</o:LastSaved>  <o:Pages>7</o:Pages>  <o:Words>2392</o:Words>  <o:Characters>13637</o:Characters>  <o:Lines>113</o:Lines>  <o:Paragraphs>27</o:Paragraphs>  <o:CharactersWithSpaces>16747</o:CharactersWithSpaces>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:ActiveWritingStyle Lang="EN-US" VendorID="8" DLLVersion="513" NLCheck="0">1</w:ActiveWritingStyle>  <w:ActiveWritingStyle Lang="EN-US" VendorID="6" DLLVersion="2" NLCheck="0">1</w:ActiveWritingStyle>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--><style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}h1	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:1;	font-size:14.0pt;	font-family:Times;	mso-font-kerning:0pt;	text-decoration:underline;	text-underline:single;}h2	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:2;	font-size:12.0pt;	font-family:Times;	text-decoration:underline;	text-underline:single;}p.MsoToc1, li.MsoToc1, div.MsoToc1	{mso-style-update:auto;	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;	font-weight:bold;}p.MsoHeader, li.MsoHeader, div.MsoHeader	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoFooter, li.MsoFooter, div.MsoFooter	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:Times;}p.Code, li.Code, div.Code	{mso-style-name:Code;	margin:0in;	margin-bottom:.0001pt;	text-indent:.75in;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Courier;}@page Section1	{size:8.5in 11.0in;	margin:.5in .75in .5in .75in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-title-page:yes;	mso-header:url(":TechnicalNotes_files:header.htm") h1;	mso-footer:url(":TechnicalNotes_files:header.htm") f1;	mso-first-footer:url(":TechnicalNotes_files:header.htm") ff1;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style></head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:28.0pt'><b><u>BLITZ<o:p></o:p></u></b></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:28.0pt'><b><u>Misc. Technical Notes</u></b></span><spanstyle='font-size:24.0pt'><b><u><o:p></o:p></u></b></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:14.0pt'><b><u><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></u></b></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:14.0pt'><b><u><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></u></b></span></p><p class=MsoNormal align=center style='text-align:center'><i>Harry H. PorterIII, Ph.D.<o:p></o:p></i></p><p class=MsoNormal align=center style='text-align:center'><i>Computer ScienceDepartment<o:p></o:p></i></p><p class=MsoNormal align=center style='text-align:center'><i>Portland StateUniversity<o:p></o:p></i></p><p class=MsoNormal style='text-align:justify'><span style='font-size:14.0pt'><b><u><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:14.0pt'><b><u><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></u></b></span></p><h2><span style='font-size:18.0pt'>Introduction<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This document contains a collection of miscellaneousmaterial that I wanted to include but that didn’t logically fir into other documents.<spanstyle="mso-spacerun: yes">&nbsp; </span>This includes comments on unresolvedcompiler bugs and comments on some design tradeoffs I considered when designingthe BLITZ system.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Students do not need to read this document.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Known Compiler Bug &#8211; CONTINUE in FORStatement<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Consider the following example.<span style="mso-spacerun:yes">&nbsp; </span>The CONTINUE statement does not work correctly:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp; </span>for (i=1; i&lt;10; i=i + 1)<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>printIntVar (&quot;i&quot;, i)<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>if i == 5<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>continue<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>endIf<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>printIntVar (&quot;i&quot;, i)<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp; </span>endFor<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The reason is that the FOR statement is translated to thefollowing WHILE statement by the parser:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp; </span>i = 1<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp; </span>while i&lt;10<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>printIntVar (&quot;i&quot;, i)<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>if i == 5<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>continue<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>endIf<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>printIntVar (&quot;i&quot;, i)<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>i = i + 1<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp; </span>endWhile<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The CONTINUE causes a jump to the beginning of the while (tothe point before the test), thereby missing the increment part.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Known Compiler Bug &#8211; Really HugeRecords<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In check.c, overflow can occur in laying out records,objects, and parameter lists.<span style="mso-spacerun: yes">&nbsp; </span>Forexample:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>type BIGREC = record<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>a1: array [536870910] of int<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>a2: array [536870910] of int<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>a3: array [536870910] of int<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>a4: array [536870910] of int<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>a5: array [536870910] of int<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>endRecord<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This is not detected, but should be.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This is a pretty nasty bug, but not something that studentswill ever encounter.<o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Known Compiler Bug &#8211; Cross-PackageInheritance<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In rare programs, this message is produced by the compiler.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-family:Courier'>********************************************************************<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<spanstyle="mso-spacerun: yes">&nbsp; </span>PROGRAM LOGIC ERROR<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<spanstyle="mso-spacerun: yes">&nbsp; </span>It appears that this compiler containsa software bug.<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<spanstyle="mso-spacerun: yes">&nbsp; </span>I apologize for the inconvenience itcauses you.<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<spanstyle="mso-spacerun: yes">&nbsp; </span>Error message: &quot;Should find amethod for every method proto&quot;<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>*****<o:p></o:p></span></p><p class=MsoNormal><span style='font-family:Courier'>********************************************************************<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The problem arises when a class defined in one packageinherits a method from a class defined in another package.<o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This bug is not encountered by students, but if it were, thework-around is simply to move the subclass into the same package as thesuperclass.<o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Fixing this bug requires a major amount of work and is stillpending.<o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>BLITZ Floating-Point Architecture &#8211;Design Tradeoffs<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>I considered including special instructions in the BLITZinstruction set to load a floating point register from a constant, in analogywith the “sethi” and “setlo” instructions, which load an integer register.<spanstyle="mso-spacerun: yes">&nbsp; </span>For example, to load an integer register,we use code like this:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>sethi<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xXXXX,r3<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>setlo<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xYYYY,r3<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The idea was to have four instructions, each of which wouldload 2 bytes into a floating-point register.<span style="mso-spacerun:yes">&nbsp; </span>Code to load a floating-point register would then look likethis:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fset1<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xWWWW,f3<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fset2<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xXXXX,f3<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fset3<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xYYYY,f3<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fset4<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xZZZZ,f3<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>I ruled such instructions out.<span style="mso-spacerun:yes">&nbsp; </span>Instead, you must use code like this:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>sethi<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xXXXX,r1<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>setlo<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>0xYYYY,r1<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>fload<spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[r1],f3<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>...<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>.double<spanstyle="mso-spacerun: yes">&nbsp; </span>123.456<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The code involving fset1, fset2, fset3, and fset4 is shorter(16 bytes), than the code sequence involving fload (20 bytes).<spanstyle="mso-spacerun: yes">&nbsp; </span>However, I decided to avoid introducingthe fset instructions since they complicated the instruction set.<spanstyle="mso-spacerun: yes">&nbsp; </span>The “fload” instruction and the“.double” pseudo-op were necessary anyway, so this solution was simpler.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The most general design philosophy of the BLITZ architectureis that memory is cheap and execution speed is irrelevant, whereas simplicityis of paramount importance.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Several options were also considered with regard to thefloating-point compare instruction (“fcmp”) and the conditional branchinginstructions.<br style='mso-special-character:line-break'><![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'><![endif]></p><p class=MsoNormal>One option (which was not chosen) was to introduce severalnew condition code bits in the status register, to reflect the outcome of the“fcmp” instruction.<span style="mso-spacerun: yes">&nbsp; </span>This wouldrequire a separate set of branch instructions to test these new bits.<spanstyle="mso-spacerun: yes">&nbsp; </span>Thus, we would have both a “fbe” and a“be” instruction to branch “if equal.”<span style="mso-spacerun: yes">&nbsp;</span>This is obviously more complex and was ruled out.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Another option (also ruled out), was to use the same bits inthe Status Register for both integer and floating-point comparisons, but tohave a separate set of branch instructions, i.e., to have both “fbe” and “be”.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Double-Precision Floating Point Values<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>Floating-pointnumbers are represented using the IEEE “Standard for Binary Floating PointArithmetic” (ANSI / IEEE Std 754-1985).<span style="mso-spacerun: yes">&nbsp;</span>BLITZ supports only double-precision numbers, not single- orquad-precision numbers.<span style="mso-spacerun: yes">&nbsp; </span>We make noclaim that the IEEE standard is supported correctly or completely; much of theimplementation is simply inherited from the underlying “C” languageimplementation on which BLITZ is built.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>A “doubleprecision” floating-point number is represented with two words (8 bytes):</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 1<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 2<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 3<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 4<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>==== ====<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>==== ====<span style="mso-spacerun: yes">&nbsp;&nbsp;</span>==== ====<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>==== ====<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>SEEE EEEE<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>EEEE XXXX<span style="mso-spacerun: yes">&nbsp;&nbsp;</span>XXXX XXXX<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>XXXX XXXX<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 5<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 6<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 7<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>byte 8<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>==== ====<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>==== ====<span style="mso-spacerun: yes">&nbsp;&nbsp;</span>==== ====<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>==== ====<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>XXXX XXXX<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>XXXX XXXX<span style="mso-spacerun: yes">&nbsp;&nbsp;</span>XXXX XXXX<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>XXXX XXXX<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>Where<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>S<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=<span style="mso-spacerun: yes">&nbsp; </span>1-bit sign bit<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>EEEE...EEEE<spanstyle="mso-spacerun: yes">&nbsp; </span>=<span style="mso-spacerun: yes">&nbsp;</span>11-bit exponent field<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>XXXX...XXXX<spanstyle="mso-spacerun: yes">&nbsp; </span>=<span style="mso-spacerun: yes">&nbsp;</span>52-bit fraction field<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>The sign bit is0=positive, 1=negative.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>The fractionfield is 52 bits.<span style="mso-spacerun: yes">&nbsp; </span>With decimal andbinary numbers, leading zeros are always insignificant and are oftenomitted.<span style="mso-spacerun: yes">&nbsp; </span>With a decimal number,the leading non-zero digit can be anything between 1 and 9; with binarynumbers, the leading non-zero bit will always be a 1.<span style="mso-spacerun:yes">&nbsp; </span>Therefore, with binary numbers, the leading 1 need not berepresented; it may be implicit.<span style="mso-spacerun: yes">&nbsp;</span>In double-precision floating-point numbers, the 52-bits of the fractionfield give 53 bits of accuracy.<span style="mso-spacerun: yes">&nbsp;</span>The fractional part (call it F) is thus:</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>F = 1.XXXX...XXXX<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>F is then raisedto some power of 2, as given by the exponent field.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>The exponent is11 bits and can therefore be interpreted as an unsigned integer between 0 and2047.<span style="mso-spacerun: yes">&nbsp; </span>If the exponent field isbetween 1 and 2046, then a normal number is being represented; if the exponentfield is 0 or 2048, then it is a special case as discussed below.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>When the exponentfield is between 1 and 2046, you should subtract 1023 to obtain the actualexponent.<span style="mso-spacerun: yes">&nbsp; </span>That is, aftersubtracting 1023, you get a number which we can call M.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>To get the numberbeing represented, take F and multiply it by 2, raised to the power M.<spanstyle="mso-spacerun: yes">&nbsp; </span>Then, adjust the sign, according to theS bit.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>The range ofnumbers representable with double precision floating-point is:</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>Smallest Number:<span style="mso-spacerun:yes">&nbsp; </span>2.2250738585072014E-308<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>Largest Number:<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>1.7976931348623157E+308<span style='mso-text-raise:3.0pt'><o:p></o:p></span></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;</span><span style="mso-spacerun: yes">&nbsp;&nbsp;</span>Precision:<span style="mso-spacerun: yes">&nbsp; </span>about 17 decimaldigits of accuracy<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>If the exponentis 2047 (i.e., all 1's), it signals a special case.<span style="mso-spacerun:yes">&nbsp; </span>Examples with exponent equal all ones are:</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>0x7FF00000 00000000 = POSITIVE-INFINITY<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>0xFFF00000 00000000 = NEGATIVE-INFINITY<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;</span>0xFFFFFFFF FFFFFFFF = NaN (i.e., “Not-a-Number”)<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>Positive andnegative infinity can result from division by zero.<span style="mso-spacerun:yes">&nbsp; </span>Not-a-number indicates that an error has occurred, such asthe square root of a negative number.<span style="mso-spacerun: yes">&nbsp;</span>The operations (add, multiply, etc.) are defined on these special casevalues in fairly logical ways.<span style="mso-spacerun: yes">&nbsp; </span>Anyoperation on a not-a-number value will yield a not-a-number result.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'>If the exponentis all zeros, it signals a “subnormal” number.<span style="mso-spacerun:yes">&nbsp; </span>These are small numbers, close to zero.<spanstyle="mso-spacerun: yes">&nbsp; </span>They are represented slightlydifferently than shown in the formula above.<span style="mso-spacerun:yes">&nbsp; </span>These numbers also have a reduced precision.<spanstyle="mso-spacerun: yes">&nbsp; </span>In particular, the implicit leading1-bit assumed for normal numbers is no longer assumed.<spanstyle="mso-spacerun: yes">&nbsp; </span>For subnormal numbers, we have</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>F = 0.XXXX...XXXX<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Exceptions During “fload” and “fstore” /<o:p></o:p></span></h2><h2><span style='font-size:18.0pt'>Page Faults and Race Conditions<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The BLITZ architecture document says that if a page-readonlyor page-invalid exception will occur during an instruction, then theinstruction will have absolutely no effect and the exception will be processedas if the instruction had no been attempted.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This is not strictly true.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Consider an instruction (such as load) which reads a wordfrom memory.<span style="mso-spacerun: yes">&nbsp; </span>Assume that theinstruction fetch causes no problems, but that an exception occurs during thereading of the target word.<span style="mso-spacerun: yes">&nbsp; </span>Forexample, assume the target word causes a page-invalid exception.<spanstyle="mso-spacerun: yes">&nbsp; </span>The instruction will be cancelled andthe registers will be unchanged.<span style="mso-spacerun: yes">&nbsp;</span>The PC will not have been advanced, so it will appear that theinstruction has not been attempted.<span style="mso-spacerun: yes">&nbsp;</span>However, one change to the system state may occur.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Recall that whenever a page is touched (i.e., read from)then its page table entry will have its “referenced” bit set.<spanstyle="mso-spacerun: yes">&nbsp; </span>In this example, the CPU will set thereferenced bit to 1, indicating that the page was used.<spanstyle="mso-spacerun: yes">&nbsp; </span>Normally, during an instruction flow,the previous few instruction will be on the same page as the problematicinstruction, so the referenced bit will already have been set.<spanstyle="mso-spacerun: yes">&nbsp; </span>In such case, there would be nochange.<span style="mso-spacerun: yes">&nbsp; </span>But it is possible thatthe problematic instruction lies in a page that has not been previouslyreferenced.<span style="mso-spacerun: yes">&nbsp; </span>(Perhaps the flow ofcontrol has just crossed a page boundary; this will happen on average every2048 instructions, so it is a fairly common occurrence.)</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>There could be a subtle race problem here, if the operatingsystem relies on the referenced bit.<span style="mso-spacerun: yes">&nbsp;</span>Perhaps the OS logic goes something like this, “Try to begin instructionexecution.<span style="mso-spacerun: yes">&nbsp; </span>After an exception,bring in the necessary pages and re-start instruction execution.<spanstyle="mso-spacerun: yes">&nbsp; </span>If memory frames are in short supply,then it is ok to page this process’s pages out; we’ll just get the same faultagain later.<span style="mso-spacerun: yes">&nbsp; </span>However, make sure thatwe are making positive progress on each process.<span style="mso-spacerun:yes">&nbsp; </span>Make sure we executed at least one instruction.<spanstyle="mso-spacerun: yes">&nbsp; </span>If we have not executed anyinstructions since the last time slice, then do not page this process’s pagesout.<span style="mso-spacerun: yes">&nbsp; </span>Instead, take frames fromanother process until this process has executed at least one instruction.<spanstyle="mso-spacerun: yes">&nbsp; </span>Check the referenced bit to see if thisprocess has made progress.”</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Obviously, the problem is in the last sentence, “Check thereferenced bit…”<span style="mso-spacerun: yes">&nbsp; </span>This is anunreliable way to determine if a process has made progress.<spanstyle="mso-spacerun: yes">&nbsp; </span>However, checking the PC is notreliable either, since it may happen to be unchanged, due to a looping process.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Another place that we can have page-table problems is withthe “fload” instruction.<span style="mso-spacerun: yes">&nbsp; </span>Thisinstruction reads two words from memory, in addition to the instructionfetch.<span style="mso-spacerun: yes">&nbsp; </span>It may be that the firstword is fetched okay, but an exception occurred on the second word.<spanstyle="mso-spacerun: yes">&nbsp; </span>This could occur if the doublewordbeing fetched happens to straddle a page boundary.<span style="mso-spacerun:yes">&nbsp; </span>As before, the “referenced” bit will be set for the framecontaining the first word of the doubleword.<span style="mso-spacerun:yes">&nbsp; </span>The exception will then occur for the second word of thedoubleword.<span style="mso-spacerun: yes">&nbsp; </span>Note that thefloating-point register will be completely unaffected; i.e., it will not be“half” loaded with just the first word.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>A similar problem occurs with storing into memory, with the“fstore.”<span style="mso-spacerun: yes">&nbsp; </span>This instruction willstore two words, and will mark the page table entries for these two words“dirty.”<span style="mso-spacerun: yes">&nbsp; </span>Usually, both words ofthe doubleword will be within the same page so that the entry will either bemarked and the operation completed or will be unmarked and an exception willoccur.<span style="mso-spacerun: yes">&nbsp; </span>However, if the doublewordhappens to straddle a page boundary and there is a page-invalid orpage-readonly fault for the second page, the entry for the first page will bemarked dirty, even though no word has been written.<span style="mso-spacerun:yes">&nbsp; </span>In other words, the page table entries are both updatedbefore any writing to memory occurs.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Note that fstore does not do an atomic store.<spanstyle="mso-spacerun: yes">&nbsp; </span>In other words, memory is not lockedbetween the write of the first half of the doubleword and the write of thesecond half of the double word.<span style="mso-spacerun: yes">&nbsp; </span>Ina multi-processor implementation, it is possible that another process doing awrite to the same doubleword will overlap and the value stored will be half ofone value and half of the other value, and thus meaningless.<spanstyle="mso-spacerun: yes">&nbsp; </span>It is the compiler’s responsibility toprotect all fstore instructions with some sort of concurrency control if thereis any possibility of concurrent access by multiple processes.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This would be a truly subtle, obscure, and hard-to-tracebug.<span style="mso-spacerun: yes">&nbsp; </span>It would result in no morethan an apparent loss of less-significant bits.<span style="mso-spacerun:yes">&nbsp; </span>A value would appear to be approximately correct, but thefinal 32 bits would be incorrect, resulting in nothing more than a loss ofaccuracy.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Note that care must be taken in the operating systemwhenever doubleword values are stored and there is a possibility ofconcurrency.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Note that we may get into somewhat of a race condition inthe OS.<span style="mso-spacerun: yes">&nbsp; </span>The fload and fstoreinstructions may require as many as 3 pages to be in memory at once: (1) thepage containing the instruction, (2) the page containing the first half of thedoubleword, and (3) the page containing the second half of the doubleword.</p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:18.0pt'>Overflows in Expression Evaluation<o:p></o:p></span></h2><h2><span style='font-size:18.0pt'>During Assembly and Linking<o:p></o:p></span></h2><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Consider the following instruction:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>0x12345678,r3<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The assembler can deduce that this value will not fit into16 bits and will issue a warning.<span style="mso-spacerun: yes">&nbsp;</span>The assembler will use the least significant 16 bits, and will assemblethe program as if the following had been coded:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>0x00005678,r3<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>For instructions requiring a 16-bit sign-extended literalvalue, the assembler will ensure that when sign-extension from 16 to 32 bitsoccurs, the value will be unchanged.<span style="mso-spacerun: yes">&nbsp;</span>The assembler will issue a warning (not a fatal error) whenever thevalue is outside of the range</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>0xffff8000 through 0x00007fff (inclusive)<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In decimal, this range is</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>-32768 through 32767 (inclusive)<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>During expression evaluation, overflow may occur.<spanstyle="mso-spacerun: yes">&nbsp; </span>Consider this instruction:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,0x80000004+0x80000005,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>In decimal, these numbers are:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>-2147483644 and -2147483643<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>so this instruction is equivalent to</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,-2147483644 + -2147483643,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>All computation is performed 32-bit arithmetic and anyoverflow is ignored.<span style="mso-spacerun: yes">&nbsp; </span>The result ofthe addition in decimal is:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Courier'><spanstyle="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>-4294967287<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This number cannot be represented in 32-bit two’scomplement.<span style="mso-spacerun: yes">&nbsp; </span>In hex, the result ofthe addition is</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>...FFFF00000009<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>When truncated to 32 bits, the value becomes</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>0x00000009<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>which is incorrect.<span style="mso-spacerun: yes">&nbsp;</span>Since this new value can be represented with only 16 bits, no error orwarning will be issued.<span style="mso-spacerun: yes">&nbsp; </span>It will beas if the programmer had coded the following:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,0x0009,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>or</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,9,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Next, consider the following instruction, where“myExternalSymbol” is defined in another file:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.import<spanstyle="mso-spacerun: yes">&nbsp; </span>myExternalSymbol<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,myExternalSymbol,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The actual value cannot be known by the assembler, so it isimpossible at assembly time to determine whether it will fit into 16 bits ornot.<span style="mso-spacerun: yes">&nbsp; </span>When the linker determinesthe actual value, the linker will issue a warning if the value is not in therange:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>0xffff8000 through 0x00007fff (inclusive)<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>This is a warning and not a fatal error.<spanstyle="mso-spacerun: yes">&nbsp; </span>The linker will simply use the leastsignificant 16 bits and proceed with that value.<span style="mso-spacerun:yes">&nbsp; </span>If this warning is ignored, the program will almostcertainly malfunction.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>There may be expressions in which one value is known by theassembler and the other is not.<span style="mso-spacerun: yes">&nbsp;</span>For example:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.import<spanstyle="mso-spacerun: yes">&nbsp; </span>myExternalSymbol<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,myExternalSymbol + -2147483643,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Assume that the actual value of “myExternalSymbol”, given insome other file, is</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>.export<span style="mso-spacerun: yes">&nbsp; </span>myExternalSymbol<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>myExternalSymbol<span style="mso-spacerun:yes">&nbsp; </span>=<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>-2147483644<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The linker will perform the addition and the result, whichwill overflow 32 bits, will be truncated to 32 bits.<span style="mso-spacerun:yes">&nbsp; </span>No error or warning will be issued, since the truncatedvalue can be represented in 16 bits.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>Now consider this example:</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>.import<span style="mso-spacerun: yes">&nbsp;</span>myExternalSymbol2<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:1.0in'><spanstyle='font-size:10.0pt;font-family:Courier'><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r3,myExternalSymbol2 + 0x11110000,r6<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The value 0x11110000 exceeds the 16 bit limit but theassembler will not issue and error or warning since it cannot determine thefinal value of the expression.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal>The linker will perform the addition.<spanstyle="mso-spacerun: yes">&nbsp; </span>As before, the linker will use 32 bitarithmetic (ignoring overflow) and will issue a warning if and only if theresulting 32 bit value cannot be represented in 16 bits.</p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p></div></body></html>