<html xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Blitz Overview"><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="BlitzOverview_files/filelist.xml"><title>Blitz Overview</title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Harry Porter</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Harry Porter</o:LastAuthor>  <o:Revision>2</o:Revision>  <o:LastPrinted>2007-09-19T18:27:00Z</o:LastPrinted>  <o:Created>2008-08-19T23:35:00Z</o:Created>  <o:LastSaved>2008-08-19T23:35:00Z</o:LastSaved>  <o:Pages>3</o:Pages>  <o:Words>2485</o:Words>  <o:Characters>13424</o:Characters>  <o:Lines>291</o:Lines>  <o:Paragraphs>97</o:Paragraphs>  <o:CharactersWithSpaces>17401</o:CharactersWithSpaces>  <o:Version>11.1280</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--><style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}h1	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:1;	font-size:16.0pt;	font-family:Times;	mso-font-kerning:0pt;	font-weight:normal;	font-style:italic;}h2	{mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	page-break-after:avoid;	mso-outline-level:2;	font-size:26.0pt;	font-family:Times;	text-decoration:underline;	text-underline:single;}p.MsoHeader, li.MsoHeader, div.MsoHeader	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoFooter, li.MsoFooter, div.MsoFooter	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Times;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	font-size:36.0pt;	font-family:Times;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:.5in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Times;}p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle	{margin:0in;	margin-bottom:.0001pt;	text-align:center;	mso-pagination:widow-orphan;	font-size:48.0pt;	font-family:Times;	font-weight:bold;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:Times;}@page Section1	{size:8.5in 11.0in;	margin:1.0in .75in 1.0in .75in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-title-page:yes;	mso-header:url(":BlitzOverview_files:header.htm") h1;	mso-footer:url(":BlitzOverview_files:header.htm") f1;	mso-first-footer:url(":BlitzOverview_files:header.htm") ff1;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style></head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span style='font-size:20.0pt'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></span></p><p class=MsoTitle><span style='font-size:28.0pt'><b>An Overview of the<o:p></o:p></b></span></p><p class=MsoSubtitle><span style='font-size:36.0pt'>BLITZ System<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><h1><span style='font-size:14.0pt'>Harry H. Porter III<o:p></o:p></span></h1><p class=MsoNormal align=center style='text-align:center'><spanstyle='font-size:14.0pt'><i>Department of Computer Science<o:p></o:p></i></span></p><h1><span style='font-size:14.0pt'>Portland State University<o:p></o:p></span></h1><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Introduction<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoBodyText>The BLITZ System is a collection of software designed tosupport a university-level course on Operating Systems. Over the course of oneor two terms, students will implement a small, but complete, operating systemkernel. The BLITZ software provides the framework for these student projects.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The Components of BLITZ<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ System is composed ofthe following components:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;BLITZ Processor Architecture</p><p class=MsoBodyText><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Virtual Machine (Emulator)</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Assembler</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Linker</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;KPL Programming Language</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;KPL Compiler</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Specifications for the Student Project</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Support Code for the Projects</p><p class=MsoNormal style='text-align:justify'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>¥&nbsp;Documentation</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Background and Context<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>OS kernels execute on baremachines, running no other software. However, developing a program to executeon a bare machine is impractical for a university-level course for severalreasons.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>First, modern processors are toocomplex for students to master on the fly and require courses in their ownright. In particular, an OS kernel must be concerned with the details of I/Oand memory-management hardware, which require detailed, specialized expertise.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Second, it is difficult todevelop and debug software on a bare machine. Without a sophisticatedcross-platform development environment, the basic steps of compiling, loading,executing, and debugging become very difficult.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Third, most students do not havean extra bare machine to experiment with. Computers today are already fullyloaded with operating systems and important user data. Experimenting withsoftware that reads and writes directly to the disk is not a reasonable option.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In light of these difficulties,OS courses take several alternate approaches. First, students are asked tocreate and/or experiment with a ÒshellÓ program. Second, students are asked tosimulate and measure in isolation various OS algorithms (such as schedulingalgorithms). Third, students are asked examine and/or modify some small sectionof a real operating system (e.g., modify Linux device drivers). Nonetheless,many students learn by doing and there is no substitute for implementing acomplete&#8212;if minimal&#8212;kernel.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The BLITZ Approach<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ software provides avirtual machine for students to use. The system includes a CPU architecture.This virtual CPU is similar to familiar processors like the PowerPC, Pentium,Sun Sparc, etc., except that it is somewhat simplified.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>There is no real BLITZ computer.Instead, the machine is virtual. A piece of software, called the BLITZÒemulatorÓ or Òvirtual machineÓ, simulates the BLITZ computer. The emulatorruns on a host machine, such as a Unix box or an Apple Macintosh.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Students will edit, compile, andlink their OS kernel projects on the host machine. Then they will execute themon the virtual machine, using the emulator. When bugs occur in the studentsÕcode, the emulator will display various error messages and the students can usethe emulator tools during debugging.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The BLITZ Architecture<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU is a RISC design, modeledloosely on SunÕs Sparc architecture. The BLITZ processor contains 32 generalpurpose integer registers, of 32-bits each. The processor also contains 32double precision floating point registers, and several other special purposeregisters, such as the Òstatus registerÓ, the Òprogram counterÓ, and some pagetable registers.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The processor executes in one oftwo modes, called Òsystem modeÓ and Òuser modeÓ. Kernel code will run in systemmode, while application programs will run in user mode. The use of modes allowsthe kernel code to be protected from malicious user programs; any attempt by auser program to execute one of the privileged instructions will be caught bythe CPU and will cause a trap into the kernel.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>An OS kernel will provide eachuser program with a virtual address space. Since each user program runs in itsown virtual address space, several different user programs can runsimultaneously without interacting or interfering with each other. To supportthe implementation of virtual address spaces by a kernel, the CPU includes amemory management unit with page tables. Real page table hardware can be quitecomplex. While the BLITZ design is simpler, it nonetheless accommodates ÒdirtybitsÓ, Òreferenced bitsÓ, Òwriteable bitsÓ, Òvalid bitsÓ, andlogical-to-physical mapping. The BLITZ architecture can accommodate virtualaddress spaces of up to 16 MBytes and physical memory of up to 4 GBytes.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ machine includes 2input-output devices. The first is a disk. The emulator simulates the disk byusing a file on the host machine. In other words, the disk data is stored in ahost file. When a program running on the BLITZ machine reads or writes a sectorfrom/to the BLITZ disk, the data is transferred from/to a file on the hostÕsfile system. The BLITZ disk includes tracks and sectors and the emulator modelsseek, rotational, settle, and transfer times, as well as transient disk errors.The disk data is transferred using DMA (direct memory access).</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The second I/O device is aterminal, which the kernel and user programs can use to communicate with ahuman user. The BLITZ terminal is a character-oriented serial device, such asan RS-232 interface. ASCII character codes are sent and receivedasynchronously, one at a time. The emulator normally passes the terminal I/Odirectly through to the host computerÕs user interface, so the students caninteract directly with the running BLITZ code, but the terminal I/O can also bedirected to host files, to facilitate automated testing.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Both serial and disk units arecontrolled through memory-mapped I/O registers. Both devices signal completionof I/O with hardware interrupts.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The CPU supports a number ofinterrupts, including asynchronous hardware interrupts (such as disk, terminal,and timer interrupts) and synchronous program exceptions (such as ÒpageinvalidÓ, Òprivileged instruction violationÓ, Òalignment exceptionÓ, andÒaddress/bus errorÓ). In addition, the architecture includes a software ÒtrapÓinstruction, which a user program can execute. The trap instruction allows auser process to enter the kernel, as would happen during the invocation of akernel routine.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ architecture isdesigned to model existing processors realistically. Since the goal is forstudents to learn how a kernel interacts with the underlying hardware; theBLITZ model is realistic enough to allow the implementation of an OS kernel. Intheory, the BLITZ processor could be fabricated in silicon and the student OScode would run directly on this machine, instead of being emulated.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>Nevertheless, when compared toreal processors, the BLITZ architecture has been simplified in ways that donÕtdetract from the projectÕs goals. Real processors are highly optimized forexecution performance and this adds tremendous complexity. In contrast, theBLITZ architecture does not include any hardware memory caching or instructionpipelining, since these features donÕt impact the understanding of basic OSconcepts. The BLITZ system includes a disk and a terminal device, but the vastcomplexity of I/O devices and drivers is avoided. The BLITZ architecture has aword alignment requirement, but no half or double word alignment. Although theBLITZ instruction set is simpler than most real processors, the BLITZ processorhas 113 distinct machine instruction op-codes, representing 49 differentinstructions.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The BLITZ Virtual Machine<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ virtual machine isemulated. The emulator tool supports the full architecture, including the diskand terminal I/O devices, the page table memory mapping hardware, and theinterrupts. The debugger is built into and is an integral part of the emulator.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The emulator can be run incommand-line mode, where the students can type commands one at a time. Thesecommands can be used to debug their BLITZ kernel code. At a low-level, thestudents can, for example, single-step CPU execution and they can examine andmodify registers and memory. At a higher level, students can look at a trace ofthe activation frame stack and look at the values of program variables,displayed in source-code form.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The emulator also maintains somestatistics, such as number of instructions executed, disk reads and writes, andso on. The emulator uses a simple model of time: the clock advances in discretefixed-size units. Each instruction takes exactly one clock unit to execute.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The BLITZ Tools<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The following pieces of softwarecomprise the BLITZ system.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>blitz<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TheBLITZ virtual machine emulator and debugger</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>asm<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TheBLITZ assembler</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>lddd<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TheBLITZ linker</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>dumpObj<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><spanstyle='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A tool to examineBLITZ object and executable files</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>diskUtil<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Atool to manipulate the initial file system on the emulated BLITZ disk</p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='font-size:14.0pt'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><b><u>kpl<o:p></o:p></u></b></span></p><p class=MsoNormal style='text-align:justify;tab-stops:.25in .5in'><spanstyle='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TheKPL compiler</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In addition, some of the code forthe OS kernel project is provided. Writing a complete OS kernel is a largeundertaking. Students will write additional code and will link it with theprovided code to produce their kernels.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><span style='font-size:20.0pt;font-family:Times;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><u><br clear=ALL style='page-break-before:always'></u></b></span><h2><span style='font-size:20.0pt'>KPL: A Kernel Programming Language<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The BLITZ system uses ahigh-level programming language called ÒKPLÓ. This language was designedspecifically for use by students in the BLITZ OS project.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In some respects, the KPLlanguage is low-level like ÒCÓ or ÒC++Ó. The language allows programmers towork directly with pointers and to manage and manipulate memory directly. Thelanguage is also facilitates cross-linking with BLITZ assembly code programs.KPL allows the programmer to work with pointers to functions, which is usefulwhen implementing threads.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In other respects, the KPLlanguage is high-level like Java. It includes objects, classes, and interfaces.The language also includes a mechanism for parameterized classes.(Parameterized classes are called Òtemplate classesÓ in C++.)</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>KPL includes a try-throw-catchmechanism, similar to JavaÕs try-throw-catch mechanism.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>KPL supports separately-compiledcomponents, called ÒpackagesÓ. Each package consists of a specification and animplementation. A package may use other packages, in which case the componentsof one package become available in another package. Each compilation processesa single package implementation, although the specification parts of otherpackages will be consulted. The system includes a mechanism to ensure that eachimplementation matches its specification and that all packages have beencompiled using current, up-to-date specifications, preventing the use ofout-of-date modules and enforcing the requirement that an executable must becomposed of consistently-compiled parts.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The philosophy of the KPLlanguage derives from its use by students creating their OS kernel projectcode. Ease of programming and debugging are emphasized above all. As such,great effort has been made to catch all programming errors, to catch themearly, and to produce clear and meaningful error messages. For example, atruntime, the system checks all pointer usage (pointers must be non-null) andall array accessing (no out-of-range indexing). Additional effort is taken atruntime so that error messages can provide accurate source code line numbersand so that variables values can be displayed clearly.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>As students create their OSkernel code, they will make use of existing support code, which is provided inthe form of pre-written KPL packages. The package specifications of the KPLlanguage are especially important in helping students understand existing codeas well as providing a clear and unambiguous requirement of what is expected ofthe implementations the student are to create. Since students will need to readand understand existing KPL code, the language syntax has been designed to promotereadability and clarity to every extent possible.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>The OS Project<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>During the course of an operatingsystems class, students will be expected to create an OS kernel for the BLITZarchitecture. The complete OS design and some support code will be provided forthem. Their task will be to (1) understand the overall design, (2) understandthe existing support code, and (3) create new code to complete the kernel.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The OS project is broken intoseveral programming projects. Each programming project will take about 2 weeksand will build on earlier projects.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The first project concernsthreads and concurrent programming. As this is the studentsÕ first introductionto the BLITZ system, this project consists of several pieces. A ÒthreadpackageÓ is provided to the students; in the first piece, students get thepackage running and make small incremental changes. Then, students willimplement solutions to several common concurrent programming problems like theÒdining philosophersÓ and Òproducer-consumerÓ. In this project, students getexperience with semaphores, locks, and the monitor concept.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The second project concerns theimplementation of user-level threads. In this project, the distinction betweenkernel code (running in system mode) and user code (running in user mode) isintroduced.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In the third project, virtualmemory is implemented. User-level programs will now run in their own virtualaddress spaces. This project will require the kernel to maintain the pagetables and service page faults.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>In the fourth project, a filesystem is added to the growing OS. User-level programs will now be able toinvoke kernel routines to read and write to files. The OS will turn theserequests in disk operations and will schedule them.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><span style='font-size:20.0pt'>Documentation<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='text-align:justify'>The following documents describethe BLITZ system:</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>An Overview of the BLITZ Computer Hardware</u></i></span>(8 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentintroduces the architecture of the emulated CPU and I/O devices.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>The BLITZ Architecture</u></i></span> (71 pages)</p><p class=MsoBodyTextIndent>This document describes the BLITZ processorhardware. It includes information about the CPU registers, the instruction setarchitecture, and the BLITZ assembly language.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>Example BLITZ Assembly Program</u></i></span> (7pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This is acompete, stand-alone BLITZ assembly program. This program can serve as a testof the BLITZ tools and an introduction to using the emulator.</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>BLITZ Instruction Set</u></i></span> (4 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentcontains detailed information on each of the BLITZ machine instructions. Itwill be of interest primarily to assembly language programmers.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>The BLITZ Emulator</u></i></span> (44 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentdescribes the BLITZ virtual machine emulator and debugger. It shows how to runa BLITZ program and describes all of the available debugging commands. It alsoincludes detailed information about the disk and terminal I/O devices.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>An Overview of KPL, A Kernel ProgrammingLanguage</u></i></span> (66 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentdescribes the ÒKPLÓ high-level programming language.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>Context-Free Grammar of KPL</u></i></span> (7pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentcontains a formal specification of the grammar of KPL and can be used as a quickreference, for syntactical questions.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>The Format of BLITZ Object and Executable Files</u></i></span>(13 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentdescribes the files produced by the assembler and the linker. This document maybe of some interest to students, but is not necessary.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>BLITZ Tools: Help Information</u></i></span> (12pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>Each of theBLITZ tools will produce some ÒhelpÓ information; this document collects suchinformation from each of the tools. This document also includes detailedinformation about the syntax of BLITZ assembly language programs.</p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>BLITZ Instruction Set &#8211; Sorted Lists</u></i></span>(4 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentlists all BLITZ machine instructions. This list is first ordered alphabeticallyby instruction name and then listed numerically by op-code. It will be ofinterest primarily to assembly language programmers.<o:p></o:p></p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>BLITZ Misc. Technical Notes</u></i></span> (8pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentcontains a number of miscellaneous comments and notes. This document may be ofsome interest to students, but is not necessary.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>The BLITZ Assembler</u></i></span> (20 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentdescribes the BLITZ assembler tool. This document may be of some interest tostudents, but is not necessary.</p><p class=MsoNormal style='text-align:justify'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><spanstyle='font-size:14.0pt'><i><u>The Thread Scheduler and Concurrency ControlPrimitives</u></i></span> (41 pages)</p><p class=MsoNormal style='margin-left:.5in;text-align:justify'>This documentdescribes the workings of a kernel thread scheduler using, as a specificexample, the scheduler in the BLITZ system.<span style="mso-spacerun:yes">&nbsp; </span>It is aimed at someone just learning about kernelconcepts.<span style="mso-spacerun: yes">&nbsp; </span>Familiarity with theBLITZ system is not assumed and is not needed to understand this document.<spanstyle="mso-spacerun: yes">&nbsp; </span>This document is not required bystudents working on the BLITZ kernel project, but it may be helpful to studentsworking on projects 2 and 3.</p><p class=MsoHeader style='tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p></div></body></html>